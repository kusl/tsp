PowerShell 7.6.0-preview.4
PS C:\Users\kushal> ssh kushal@192.168.0.120
kushal@192.168.0.120's password:
Linux texas 6.12.38+deb13-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.12.38-1 (2025-07-16) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Sun Aug 17 22:05:33 2025 from 192.168.0.213
kushal@texas:~$ cd ~/mybashscripts/; curl -o install-kusl-tsp.sh https://raw.githubusercontent.com/kusl/tsp/refs/heads/master/scripts/install-linux.sh; cat ~/mybashscripts/install-kusl-tsp.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  9882  100  9882    0     0  88273      0 --:--:-- --:--:-- --:--:-- 89027
#!/bin/bash

# TSP Solver Installation Script for Linux
# Installs the latest kusl/tsp release to /opt/kusl-tsp
# Safe, idempotent, and non-destructive

set -euo pipefail  # Exit on error, undefined variables, and pipe failures

# Configuration
readonly GITHUB_REPO="kusl/tsp"
readonly INSTALL_DIR="/opt"
readonly BINARY_NAME="kusl-tsp"
readonly INSTALL_PATH="${INSTALL_DIR}/${BINARY_NAME}"
readonly TEMP_DIR=$(mktemp -d)
readonly GITHUB_API="https://api.github.com/repos/${GITHUB_REPO}/releases/latest"

# Colors for output (works on most terminals)
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Cleanup function
cleanup() {
    if [[ -d "${TEMP_DIR}" ]]; then
        rm -rf "${TEMP_DIR}"
    fi
}

# Set trap to cleanup on exit
trap cleanup EXIT INT TERM

# Print colored messages
print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running with appropriate permissions
check_permissions() {
    if [[ ! -w "${INSTALL_DIR}" ]]; then
        if [[ $EUID -ne 0 ]]; then
            print_error "This script needs write access to ${INSTALL_DIR}"
            print_info "Please run with sudo: sudo $0"
            exit 1
        fi
    fi
}

# Check for required commands
check_dependencies() {
    local deps=("curl" "jq" "chmod")
    local missing=()

    for cmd in "${deps[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        print_error "Missing required commands: ${missing[*]}"
        print_info "Install them with:"

        # Detect package manager
        if command -v apt-get &> /dev/null; then
            echo "  sudo apt-get update && sudo apt-get install -y ${missing[*]}"
        elif command -v dnf &> /dev/null; then
            echo "  sudo dnf install -y ${missing[*]}"
        elif command -v yum &> /dev/null; then
            echo "  sudo yum install -y ${missing[*]}"
        else
            echo "  Please install: ${missing[*]}"
        fi
        exit 1
    fi
}

# Get the latest release information from GitHub
get_latest_release_info() {
    print_info "Fetching latest release information from GitHub..."

    local response
    response=$(curl -s -f "${GITHUB_API}" 2>/dev/null) || {
        print_error "Failed to fetch release information from GitHub"
        print_info "API URL: ${GITHUB_API}"
        return 1
    }

    # Extract the Linux x64 binary URL from assets
    local download_url
    download_url=$(echo "$response" | jq -r '.assets[] | select(.name | contains("linux-x64")) | .browser_download_url' 2>/dev/null | head -n1)

    # If no asset found, construct URL from tag
    if [[ -z "$download_url" ]] || [[ "$download_url" == "null" ]]; then
        local tag_name
        tag_name=$(echo "$response" | jq -r '.tag_name' 2>/dev/null)

        if [[ -n "$tag_name" ]] && [[ "$tag_name" != "null" ]]; then
            # Extract SHA from tag (format: v25.8.18.1138-76e0c299)
            local sha
            sha=$(echo "$tag_name" | grep -oE '[a-f0-9]{8}$' || true)

            if [[ -n "$sha" ]]; then
                download_url="https://github.com/${GITHUB_REPO}/releases/download/${tag_name}/TSP-linux-x64-${sha}"
                print_info "Constructed download URL from tag: ${tag_name}"
            fi
        fi
    fi

    if [[ -z "$download_url" ]] || [[ "$download_url" == "null" ]]; then
        print_error "Could not find Linux x64 binary in the latest release"
        print_info "Please check: https://github.com/${GITHUB_REPO}/releases"
        return 1
    fi

    local version
    version=$(echo "$response" | jq -r '.tag_name' 2>/dev/null || echo "unknown")

    # Return both URL and version
    echo "${download_url}"
    echo "${version}"
}

# Download the binary
download_binary() {
    local url=$1
    local output_file=$2

    print_info "Downloading from: $url"

    # Use curl with proper error handling
    if ! curl -L -f -o "$output_file" "$url" --progress-bar 2>/dev/null; then
        print_error "Failed to download binary from $url"
        return 1
    fi

    # Verify the download
    if [[ ! -f "$output_file" ]]; then
        print_error "Downloaded file not found"
        return 1
    fi

    local file_size
    file_size=$(stat -c%s "$output_file" 2>/dev/null || stat -f%z "$output_file" 2>/dev/null || echo 0)

    if [[ "$file_size" -lt 1000 ]]; then
        print_error "Downloaded file seems too small (${file_size} bytes)"
        print_error "This might indicate a 404 or other download error"
        return 1
    fi

    # Use a simpler size display that works on more systems
    local size_display
    if command -v numfmt &> /dev/null; then
        size_display=$(numfmt --to=iec-i --suffix=B "$file_size" 2>/dev/null || echo "${file_size} bytes")
    else
        size_display="${file_size} bytes"
    fi

    print_success "Download complete (${size_display})"
}

# Check if binary is already installed and get its version
get_installed_version() {
    if [[ -f "${INSTALL_PATH}" ]] && [[ -x "${INSTALL_PATH}" ]]; then
        # Try to get version from the binary
        local version
        version=$("${INSTALL_PATH}" --version 2>/dev/null | head -n1 || echo "unknown")
        echo "$version"
    else
        echo "none"
    fi
}

# Install the binary
install_binary() {
    local temp_binary=$1
    local version=$2

    print_info "Installing to ${INSTALL_PATH}..."

    # Backup existing binary if it exists
    if [[ -f "${INSTALL_PATH}" ]]; then
        local backup_path="${INSTALL_PATH}.backup.$(date +%Y%m%d-%H%M%S)"
        print_info "Backing up existing binary to ${backup_path}"
        cp "${INSTALL_PATH}" "${backup_path}"
    fi

    # Make binary executable
    chmod +x "$temp_binary"

    # Move to final location
    if ! mv -f "$temp_binary" "${INSTALL_PATH}"; then
        print_error "Failed to install binary to ${INSTALL_PATH}"
        return 1
    fi

    # Verify installation
    if [[ ! -x "${INSTALL_PATH}" ]]; then
        print_error "Installation verification failed"
        return 1
    fi

    print_success "Successfully installed ${BINARY_NAME} version ${version}"
}

# Create convenience symlink
create_symlink() {
    local symlink_path="/usr/local/bin/${BINARY_NAME}"

    print_info "Creating symlink for system-wide access..."

    # Check if /usr/local/bin exists
    if [[ ! -d "/usr/local/bin" ]]; then
        print_warning "/usr/local/bin does not exist, skipping symlink creation"
        return 0
    fi

    # Create or update symlink
    if ln -sf "${INSTALL_PATH}" "${symlink_path}" 2>/dev/null; then
        print_success "Symlink created: ${symlink_path} -> ${INSTALL_PATH}"
    else
        print_warning "Could not create symlink in /usr/local/bin (permission denied)"
        print_info "You can manually create it with:"
        echo "  sudo ln -sf ${INSTALL_PATH} ${symlink_path}"
    fi
}

# Main installation process
main() {
    echo "================================================="
    echo " TSP Solver Installation Script"
    echo " Repository: https://github.com/${GITHUB_REPO}"
    echo "================================================="
    echo

    # Check permissions
    check_permissions

    # Check dependencies
    check_dependencies

    # Get currently installed version
    local installed_version
    installed_version=$(get_installed_version)

    if [[ "$installed_version" != "none" ]]; then
        print_info "Currently installed version: ${installed_version}"
    else
        print_info "No existing installation found"
    fi

    # Get latest release info (now returns two lines)
    local release_info
    release_info=$(get_latest_release_info) || exit 1

    # Read the two lines
    local download_url
    local latest_version
    download_url=$(echo "$release_info" | head -n1)
    latest_version=$(echo "$release_info" | tail -n1)

    # Validate URL
    if [[ ! "$download_url" =~ ^https:// ]]; then
        print_error "Invalid download URL: $download_url"
        exit 1
    fi

    print_info "Latest available version: ${latest_version}"

    # Ask for confirmation if already installed
    if [[ "$installed_version" != "none" ]]; then
        echo
        read -p "Do you want to proceed with the installation? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Installation cancelled"
            exit 0
        fi
    fi

    # Download binary to temp directory
    local temp_binary="${TEMP_DIR}/tsp-binary"
    download_binary "$download_url" "$temp_binary" || exit 1

    # Install the binary
    install_binary "$temp_binary" "$latest_version" || exit 1

    # Create symlink for easier access
    create_symlink

    echo
    print_success "Installation complete!"
    echo
    echo "You can now run the TSP solver using:"
    echo "  ${INSTALL_PATH}"

    if [[ -L "/usr/local/bin/${BINARY_NAME}" ]]; then
        echo "  or simply: ${BINARY_NAME}"
    else
        echo
        echo "To run from anywhere, add to PATH or create a symlink:"
        echo "  sudo ln -sf ${INSTALL_PATH} /usr/local/bin/${BINARY_NAME}"
    fi

    echo
    echo "For help, run:"
    echo "  ${BINARY_NAME} --help"
    echo

    # Test the installation
    print_info "Testing installation..."
    if "${INSTALL_PATH}" --version &>/dev/null; then
        print_success "Installation test passed!"
        echo "Version: $("${INSTALL_PATH}" --version 2>/dev/null | head -n1 || echo "unknown")"
    else
        print_warning "Could not verify installation. Please test manually."
    fi
}

# Run main function
main "$@"
kushal@texas:~/mybashscripts$ cd ~/mybashscripts/; curl -o install-kusl-tsp.sh https://raw.githubusercontent.com/kusl/tsp/refs/heads/master/scripts/install-linux.sh; cat ~/mybashscripts/install-kusl-tsp.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  9882  100  9882    0     0   126k      0 --:--:-- --:--:-- --:--:--  126k
#!/bin/bash

# TSP Solver Installation Script for Linux
# Installs the latest kusl/tsp release to /opt/kusl-tsp
# Safe, idempotent, and non-destructive

set -euo pipefail  # Exit on error, undefined variables, and pipe failures

# Configuration
readonly GITHUB_REPO="kusl/tsp"
readonly INSTALL_DIR="/opt"
readonly BINARY_NAME="kusl-tsp"
readonly INSTALL_PATH="${INSTALL_DIR}/${BINARY_NAME}"
readonly TEMP_DIR=$(mktemp -d)
readonly GITHUB_API="https://api.github.com/repos/${GITHUB_REPO}/releases/latest"

# Colors for output (works on most terminals)
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Cleanup function
cleanup() {
    if [[ -d "${TEMP_DIR}" ]]; then
        rm -rf "${TEMP_DIR}"
    fi
}

# Set trap to cleanup on exit
trap cleanup EXIT INT TERM

# Print colored messages
print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running with appropriate permissions
check_permissions() {
    if [[ ! -w "${INSTALL_DIR}" ]]; then
        if [[ $EUID -ne 0 ]]; then
            print_error "This script needs write access to ${INSTALL_DIR}"
            print_info "Please run with sudo: sudo $0"
            exit 1
        fi
    fi
}

# Check for required commands
check_dependencies() {
    local deps=("curl" "jq" "chmod")
    local missing=()

    for cmd in "${deps[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        print_error "Missing required commands: ${missing[*]}"
        print_info "Install them with:"

        # Detect package manager
        if command -v apt-get &> /dev/null; then
            echo "  sudo apt-get update && sudo apt-get install -y ${missing[*]}"
        elif command -v dnf &> /dev/null; then
            echo "  sudo dnf install -y ${missing[*]}"
        elif command -v yum &> /dev/null; then
            echo "  sudo yum install -y ${missing[*]}"
        else
            echo "  Please install: ${missing[*]}"
        fi
        exit 1
    fi
}

# Get the latest release information from GitHub
get_latest_release_info() {
    print_info "Fetching latest release information from GitHub..."

    local response
    response=$(curl -s -f "${GITHUB_API}" 2>/dev/null) || {
        print_error "Failed to fetch release information from GitHub"
        print_info "API URL: ${GITHUB_API}"
        return 1
    }

    # Extract the Linux x64 binary URL from assets
    local download_url
    download_url=$(echo "$response" | jq -r '.assets[] | select(.name | contains("linux-x64")) | .browser_download_url' 2>/dev/null | head -n1)

    # If no asset found, construct URL from tag
    if [[ -z "$download_url" ]] || [[ "$download_url" == "null" ]]; then
        local tag_name
        tag_name=$(echo "$response" | jq -r '.tag_name' 2>/dev/null)

        if [[ -n "$tag_name" ]] && [[ "$tag_name" != "null" ]]; then
            # Extract SHA from tag (format: v25.8.18.1138-76e0c299)
            local sha
            sha=$(echo "$tag_name" | grep -oE '[a-f0-9]{8}$' || true)

            if [[ -n "$sha" ]]; then
                download_url="https://github.com/${GITHUB_REPO}/releases/download/${tag_name}/TSP-linux-x64-${sha}"
                print_info "Constructed download URL from tag: ${tag_name}"
            fi
        fi
    fi

    if [[ -z "$download_url" ]] || [[ "$download_url" == "null" ]]; then
        print_error "Could not find Linux x64 binary in the latest release"
        print_info "Please check: https://github.com/${GITHUB_REPO}/releases"
        return 1
    fi

    local version
    version=$(echo "$response" | jq -r '.tag_name' 2>/dev/null || echo "unknown")

    # Return both URL and version
    echo "${download_url}"
    echo "${version}"
}

# Download the binary
download_binary() {
    local url=$1
    local output_file=$2

    print_info "Downloading from: $url"

    # Use curl with proper error handling
    if ! curl -L -f -o "$output_file" "$url" --progress-bar 2>/dev/null; then
        print_error "Failed to download binary from $url"
        return 1
    fi

    # Verify the download
    if [[ ! -f "$output_file" ]]; then
        print_error "Downloaded file not found"
        return 1
    fi

    local file_size
    file_size=$(stat -c%s "$output_file" 2>/dev/null || stat -f%z "$output_file" 2>/dev/null || echo 0)

    if [[ "$file_size" -lt 1000 ]]; then
        print_error "Downloaded file seems too small (${file_size} bytes)"
        print_error "This might indicate a 404 or other download error"
        return 1
    fi

    # Use a simpler size display that works on more systems
    local size_display
    if command -v numfmt &> /dev/null; then
        size_display=$(numfmt --to=iec-i --suffix=B "$file_size" 2>/dev/null || echo "${file_size} bytes")
    else
        size_display="${file_size} bytes"
    fi

    print_success "Download complete (${size_display})"
}

# Check if binary is already installed and get its version
get_installed_version() {
    if [[ -f "${INSTALL_PATH}" ]] && [[ -x "${INSTALL_PATH}" ]]; then
        # Try to get version from the binary
        local version
        version=$("${INSTALL_PATH}" --version 2>/dev/null | head -n1 || echo "unknown")
        echo "$version"
    else
        echo "none"
    fi
}

# Install the binary
install_binary() {
    local temp_binary=$1
    local version=$2

    print_info "Installing to ${INSTALL_PATH}..."

    # Backup existing binary if it exists
    if [[ -f "${INSTALL_PATH}" ]]; then
        local backup_path="${INSTALL_PATH}.backup.$(date +%Y%m%d-%H%M%S)"
        print_info "Backing up existing binary to ${backup_path}"
        cp "${INSTALL_PATH}" "${backup_path}"
    fi

    # Make binary executable
    chmod +x "$temp_binary"

    # Move to final location
    if ! mv -f "$temp_binary" "${INSTALL_PATH}"; then
        print_error "Failed to install binary to ${INSTALL_PATH}"
        return 1
    fi

    # Verify installation
    if [[ ! -x "${INSTALL_PATH}" ]]; then
        print_error "Installation verification failed"
        return 1
    fi

    print_success "Successfully installed ${BINARY_NAME} version ${version}"
}

# Create convenience symlink
create_symlink() {
    local symlink_path="/usr/local/bin/${BINARY_NAME}"

    print_info "Creating symlink for system-wide access..."

    # Check if /usr/local/bin exists
    if [[ ! -d "/usr/local/bin" ]]; then
        print_warning "/usr/local/bin does not exist, skipping symlink creation"
        return 0
    fi

    # Create or update symlink
    if ln -sf "${INSTALL_PATH}" "${symlink_path}" 2>/dev/null; then
        print_success "Symlink created: ${symlink_path} -> ${INSTALL_PATH}"
    else
        print_warning "Could not create symlink in /usr/local/bin (permission denied)"
        print_info "You can manually create it with:"
        echo "  sudo ln -sf ${INSTALL_PATH} ${symlink_path}"
    fi
}

# Main installation process
main() {
    echo "================================================="
    echo " TSP Solver Installation Script"
    echo " Repository: https://github.com/${GITHUB_REPO}"
    echo "================================================="
    echo

    # Check permissions
    check_permissions

    # Check dependencies
    check_dependencies

    # Get currently installed version
    local installed_version
    installed_version=$(get_installed_version)

    if [[ "$installed_version" != "none" ]]; then
        print_info "Currently installed version: ${installed_version}"
    else
        print_info "No existing installation found"
    fi

    # Get latest release info (now returns two lines)
    local release_info
    release_info=$(get_latest_release_info) || exit 1

    # Read the two lines
    local download_url
    local latest_version
    download_url=$(echo "$release_info" | head -n1)
    latest_version=$(echo "$release_info" | tail -n1)

    # Validate URL
    if [[ ! "$download_url" =~ ^https:// ]]; then
        print_error "Invalid download URL: $download_url"
        exit 1
    fi

    print_info "Latest available version: ${latest_version}"

    # Ask for confirmation if already installed
    if [[ "$installed_version" != "none" ]]; then
        echo
        read -p "Do you want to proceed with the installation? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Installation cancelled"
            exit 0
        fi
    fi

    # Download binary to temp directory
    local temp_binary="${TEMP_DIR}/tsp-binary"
    download_binary "$download_url" "$temp_binary" || exit 1

    # Install the binary
    install_binary "$temp_binary" "$latest_version" || exit 1

    # Create symlink for easier access
    create_symlink

    echo
    print_success "Installation complete!"
    echo
    echo "You can now run the TSP solver using:"
    echo "  ${INSTALL_PATH}"

    if [[ -L "/usr/local/bin/${BINARY_NAME}" ]]; then
        echo "  or simply: ${BINARY_NAME}"
    else
        echo
        echo "To run from anywhere, add to PATH or create a symlink:"
        echo "  sudo ln -sf ${INSTALL_PATH} /usr/local/bin/${BINARY_NAME}"
    fi

    echo
    echo "For help, run:"
    echo "  ${BINARY_NAME} --help"
    echo

    # Test the installation
    print_info "Testing installation..."
    if "${INSTALL_PATH}" --version &>/dev/null; then
        print_success "Installation test passed!"
        echo "Version: $("${INSTALL_PATH}" --version 2>/dev/null | head -n1 || echo "unknown")"
    else
        print_warning "Could not verify installation. Please test manually."
    fi
}

# Run main function
main "$@"
kushal@texas:~/mybashscripts$ chmod +x install-kusl-tsp.sh
kushal@texas:~/mybashscripts$ sudo date; time sudo ./install-kusl-tsp.sh
[sudo] password for kushal:
Sun Aug 17 10:11:03 PM EDT 2025
=================================================
 TSP Solver Installation Script
 Repository: https://github.com/kusl/tsp
=================================================

[INFO] No existing installation found
[ERROR] Invalid download URL: [INFO] Fetching latest release information from GitHub...

real    0m0.935s
user    0m0.011s
sys     0m0.007s
kushal@texas:~/mybashscripts$
kushal@texas:~/mybashscripts$ cd ~/mybashscripts/; curl -o ~/mybashscripts/install-kusl-tsp.sh https://raw.githubusercontent.com/kusl/tsp/refs/heads/master/scripts/install-kusl-tsp-simple.sh; cat ~/mybashscrip
ts/install-kusl-tsp.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  3778  100  3778    0     0  35799      0 --:--:-- --:--:-- --:--:-- 35980
#!/bin/bash

# TSP Solver Installation Script for Linux (Simple Version)
# Installs the latest kusl/tsp release to /opt/kusl-tsp

set -euo pipefail

# Configuration
GITHUB_REPO="kusl/tsp"
INSTALL_DIR="/opt"
BINARY_NAME="kusl-tsp"
INSTALL_PATH="${INSTALL_DIR}/${BINARY_NAME}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "================================================="
echo " TSP Solver Installation Script"
echo " Repository: https://github.com/${GITHUB_REPO}"
echo "================================================="
echo

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}[ERROR]${NC} This script must be run as root (use sudo)"
   exit 1
fi

# Check for required commands
for cmd in curl jq; do
    if ! command -v "$cmd" &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} Missing required command: $cmd"
        echo "Install with: apt-get update && apt-get install -y $cmd"
        exit 1
    fi
done

# Get the latest release info from GitHub
echo -e "${BLUE}[INFO]${NC} Fetching latest release from GitHub..."
RELEASE_JSON=$(curl -s "https://api.github.com/repos/${GITHUB_REPO}/releases/latest")

# Extract tag name
TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
if [[ -z "$TAG_NAME" ]] || [[ "$TAG_NAME" == "null" ]]; then
    echo -e "${RED}[ERROR]${NC} Could not fetch release information"
    exit 1
fi

echo -e "${BLUE}[INFO]${NC} Latest version: $TAG_NAME"

# Extract SHA from tag (format: v25.8.18.1138-76e0c299)
SHA=$(echo "$TAG_NAME" | grep -oE '[a-f0-9]{8}$' || true)
if [[ -z "$SHA" ]]; then
    echo -e "${RED}[ERROR]${NC} Could not extract SHA from tag: $TAG_NAME"
    exit 1
fi

# Construct download URL
DOWNLOAD_URL="https://github.com/${GITHUB_REPO}/releases/download/${TAG_NAME}/TSP-linux-x64-${SHA}"
echo -e "${BLUE}[INFO]${NC} Download URL: $DOWNLOAD_URL"

# Create temp directory
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Download the binary
echo -e "${BLUE}[INFO]${NC} Downloading binary..."
TEMP_BINARY="${TEMP_DIR}/tsp-binary"

if ! curl -L -f -o "$TEMP_BINARY" "$DOWNLOAD_URL" --progress-bar; then
    echo -e "${RED}[ERROR]${NC} Failed to download binary"
    exit 1
fi

# Check file size
FILE_SIZE=$(stat -c%s "$TEMP_BINARY" 2>/dev/null || echo 0)
if [[ "$FILE_SIZE" -lt 1000 ]]; then
    echo -e "${RED}[ERROR]${NC} Downloaded file too small (${FILE_SIZE} bytes)"
    echo "First 100 bytes: $(head -c 100 "$TEMP_BINARY" | tr '\n' ' ')"
    exit 1
fi

echo -e "${GREEN}[SUCCESS]${NC} Downloaded $((FILE_SIZE / 1048576)) MB"

# Backup existing installation if present
if [[ -f "$INSTALL_PATH" ]]; then
    BACKUP_PATH="${INSTALL_PATH}.backup.$(date +%Y%m%d-%H%M%S)"
    echo -e "${BLUE}[INFO]${NC} Backing up existing binary to $BACKUP_PATH"
    cp "$INSTALL_PATH" "$BACKUP_PATH"
fi

# Install the binary
echo -e "${BLUE}[INFO]${NC} Installing to $INSTALL_PATH..."
chmod +x "$TEMP_BINARY"
mv -f "$TEMP_BINARY" "$INSTALL_PATH"

# Create symlink
SYMLINK_PATH="/usr/local/bin/${BINARY_NAME}"
if [[ -d "/usr/local/bin" ]]; then
    ln -sf "$INSTALL_PATH" "$SYMLINK_PATH"
    echo -e "${GREEN}[SUCCESS]${NC} Symlink created: $SYMLINK_PATH"
fi

# Test installation
echo -e "${BLUE}[INFO]${NC} Testing installation..."
if "$INSTALL_PATH" --version &>/dev/null; then
    VERSION=$("$INSTALL_PATH" --version 2>/dev/null | head -n1 || echo "unknown")
    echo -e "${GREEN}[SUCCESS]${NC} Installation complete! Version: $VERSION"
else
    echo -e "${GREEN}[SUCCESS]${NC} Installation complete!"
    echo "Note: Could not verify version (this is normal for some binaries)"
fi

echo
echo "You can now run the TSP solver using:"
echo "  $INSTALL_PATH"
if [[ -L "$SYMLINK_PATH" ]]; then
    echo "  or simply: $BINARY_NAME"
fi
echo
echo "For help, run: ${BINARY_NAME} --help"kushal@texas:~/mybashscripts$
kushal@texas:~/mybashscripts$ cd ~/mybashscripts/; curl -o ~/mybashscripts/install-kusl-tsp.sh https://raw.githubusercontent.com/kusl/tsp/refs/heads/master/scripts/install-kusl-tsp-simple.sh; cat ~/mybashscripts/install-kusl-tsp.sh; chmod +x ~/mybashscripts/install-kusl-tsp.sh; sudo date; time sudo ./install-kusl-tsp.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  3778  100  3778    0     0  58597      0 --:--:-- --:--:-- --:--:-- 59031
#!/bin/bash

# TSP Solver Installation Script for Linux (Simple Version)
# Installs the latest kusl/tsp release to /opt/kusl-tsp

set -euo pipefail

# Configuration
GITHUB_REPO="kusl/tsp"
INSTALL_DIR="/opt"
BINARY_NAME="kusl-tsp"
INSTALL_PATH="${INSTALL_DIR}/${BINARY_NAME}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "================================================="
echo " TSP Solver Installation Script"
echo " Repository: https://github.com/${GITHUB_REPO}"
echo "================================================="
echo

# Check if running as root
if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}[ERROR]${NC} This script must be run as root (use sudo)"
   exit 1
fi

# Check for required commands
for cmd in curl jq; do
    if ! command -v "$cmd" &> /dev/null; then
        echo -e "${RED}[ERROR]${NC} Missing required command: $cmd"
        echo "Install with: apt-get update && apt-get install -y $cmd"
        exit 1
    fi
done

# Get the latest release info from GitHub
echo -e "${BLUE}[INFO]${NC} Fetching latest release from GitHub..."
RELEASE_JSON=$(curl -s "https://api.github.com/repos/${GITHUB_REPO}/releases/latest")

# Extract tag name
TAG_NAME=$(echo "$RELEASE_JSON" | jq -r '.tag_name')
if [[ -z "$TAG_NAME" ]] || [[ "$TAG_NAME" == "null" ]]; then
    echo -e "${RED}[ERROR]${NC} Could not fetch release information"
    exit 1
fi

echo -e "${BLUE}[INFO]${NC} Latest version: $TAG_NAME"

# Extract SHA from tag (format: v25.8.18.1138-76e0c299)
SHA=$(echo "$TAG_NAME" | grep -oE '[a-f0-9]{8}$' || true)
if [[ -z "$SHA" ]]; then
    echo -e "${RED}[ERROR]${NC} Could not extract SHA from tag: $TAG_NAME"
    exit 1
fi

# Construct download URL
DOWNLOAD_URL="https://github.com/${GITHUB_REPO}/releases/download/${TAG_NAME}/TSP-linux-x64-${SHA}"
echo -e "${BLUE}[INFO]${NC} Download URL: $DOWNLOAD_URL"

# Create temp directory
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Download the binary
echo -e "${BLUE}[INFO]${NC} Downloading binary..."
TEMP_BINARY="${TEMP_DIR}/tsp-binary"

if ! curl -L -f -o "$TEMP_BINARY" "$DOWNLOAD_URL" --progress-bar; then
    echo -e "${RED}[ERROR]${NC} Failed to download binary"
    exit 1
fi

# Check file size
FILE_SIZE=$(stat -c%s "$TEMP_BINARY" 2>/dev/null || echo 0)
if [[ "$FILE_SIZE" -lt 1000 ]]; then
    echo -e "${RED}[ERROR]${NC} Downloaded file too small (${FILE_SIZE} bytes)"
    echo "First 100 bytes: $(head -c 100 "$TEMP_BINARY" | tr '\n' ' ')"
    exit 1
fi

echo -e "${GREEN}[SUCCESS]${NC} Downloaded $((FILE_SIZE / 1048576)) MB"

# Backup existing installation if present
if [[ -f "$INSTALL_PATH" ]]; then
    BACKUP_PATH="${INSTALL_PATH}.backup.$(date +%Y%m%d-%H%M%S)"
    echo -e "${BLUE}[INFO]${NC} Backing up existing binary to $BACKUP_PATH"
    cp "$INSTALL_PATH" "$BACKUP_PATH"
fi

# Install the binary
echo -e "${BLUE}[INFO]${NC} Installing to $INSTALL_PATH..."
chmod +x "$TEMP_BINARY"
mv -f "$TEMP_BINARY" "$INSTALL_PATH"

# Create symlink
SYMLINK_PATH="/usr/local/bin/${BINARY_NAME}"
if [[ -d "/usr/local/bin" ]]; then
    ln -sf "$INSTALL_PATH" "$SYMLINK_PATH"
    echo -e "${GREEN}[SUCCESS]${NC} Symlink created: $SYMLINK_PATH"
fi

# Test installation
echo -e "${BLUE}[INFO]${NC} Testing installation..."
if "$INSTALL_PATH" --version &>/dev/null; then
    VERSION=$("$INSTALL_PATH" --version 2>/dev/null | head -n1 || echo "unknown")
    echo -e "${GREEN}[SUCCESS]${NC} Installation complete! Version: $VERSION"
else
    echo -e "${GREEN}[SUCCESS]${NC} Installation complete!"
    echo "Note: Could not verify version (this is normal for some binaries)"
fi

echo
echo "You can now run the TSP solver using:"
echo "  $INSTALL_PATH"
if [[ -L "$SYMLINK_PATH" ]]; then
    echo "  or simply: $BINARY_NAME"
fi
echo
echo "For help, run: ${BINARY_NAME} --help"Sun Aug 17 10:16:25 PM EDT 2025
=================================================
 TSP Solver Installation Script
 Repository: https://github.com/kusl/tsp
=================================================

[INFO] Fetching latest release from GitHub...
[INFO] Latest version: v25.8.18.1147-7de594b5
[INFO] Download URL: https://github.com/kusl/tsp/releases/download/v25.8.18.1147-7de594b5/TSP-linux-x64-7de594b5
[INFO] Downloading binary...
########################################################################################################################################################################################################## 100.0%
[SUCCESS] Downloaded 4 MB
[INFO] Installing to /opt/kusl-tsp...
[SUCCESS] Symlink created: /usr/local/bin/kusl-tsp
[INFO] Testing installation...
[SUCCESS] Installation complete! Version: TSP Solver v25.8.18

You can now run the TSP solver using:
  /opt/kusl-tsp
  or simply: kusl-tsp

For help, run: kusl-tsp --help

real    0m1.048s
user    0m0.008s
sys     0m0.014s
kushal@texas:~/mybashscripts$ kusl-tsp
[22:16:39 INF] TSP Solver v25.8.18 starting up

[22:16:39 INF] ╔═══════════════════════════════════════════════════════════════╗
[22:16:39 INF] ║          TRAVELING SALESMAN PROBLEM SOLVER v25.8.18           ║
[22:16:39 INF] ║                     .NET 9 Implementation                     ║
[22:16:39 INF] ╚═══════════════════════════════════════════════════════════════╝
[22:16:39 INF] 📍 Main Menu:
[22:16:39 INF]
[22:16:39 INF]   1. Interactive Solver - Solve custom TSP instances
[22:16:39 INF]   2. Algorithm Benchmark - Compare all algorithms
[22:16:39 INF]   3. Visual Demonstration - See algorithms in action
[22:16:39 INF]   4. Algorithm Information - Learn about each algorithm
[22:16:39 INF]   5. Exit
[22:16:39 INF] ➤ Select an option (1-5):
1
[22:16:45 INF] Starting interactive solver session
[22:16:45 INF] ════════════════════════════════════════════════════════════
[22:16:45 INF]   Interactive TSP Solver
[22:16:45 INF] ════════════════════════════════════════════════════════════
[22:16:45 INF] How many cities? (minimum 2):
2
[22:16:50 INF] Interactive solver configured for 2 cities
[22:16:50 INF] Select city distribution pattern:
[22:16:50 INF]   1. Random
[22:16:50 INF]   2. Circular
[22:16:50 INF]   3. Grid
[22:16:50 INF] ➤ Select pattern (1-3):
1
[22:16:53 DBG] Generating 2 random cities in area 100x100
[22:16:53 INF] Generated 2 random cities
[22:16:53 INF] ✓ Generated 2 random cities
[22:16:53 INF] Generated 2 cities with random pattern
[22:16:53 INF] Select algorithm:
[22:16:53 INF]   1. Nearest Neighbor (Fast, Good)
[22:16:53 INF]   2. 2-Opt (Medium, Better)
[22:16:53 INF]   3. Simulated Annealing (Slow, Very Good)
[22:16:53 INF]   4. Genetic Algorithm (Slowest, Best)
[22:16:53 INF] ➤ Select algorithm (1-4):
4
[22:16:56 INF] Selected algorithm: Genetic Algorithm for 2 cities
[22:16:56 INF] 🔄 Running Genetic Algorithm algorithm...
[22:16:56 INF] Starting TSP solution with Genetic Algorithm
[22:16:56 INF] Starting Genetic Algorithm for 2 cities (population: 200, generations: 1000, mutation rate: 0.100, elitism rate: 0.100)
[22:16:56 DBG] Building distance matrix for 2 cities
[22:16:56 DBG] Distance matrix built successfully
[22:16:56 DBG] Initializing population of 200 individuals
[22:16:56 DBG] Initial population created. Best distance: 132.70
.[22:16:56 DBG] Early stopping at generation 250 due to no improvement
[22:16:56 INF] Genetic Algorithm completed. Distance: 132.70 (improved by 0.0%)
[22:16:56 INF] TSP solution completed - Algorithm: Genetic Algorithm, Cities: 2, Pattern: random, Distance: 132.70, Time: 92ms


[22:16:56 INF] ════════════════════════════════════════════════════════════
[22:16:56 INF] ✓ Solution Found!
[22:16:56 INF] ════════════════════════════════════════════════════════════
[22:16:56 INF] Algorithm: Genetic Algorithm
[22:16:56 INF] Execution Time: 92 ms
[22:16:56 INF] Total Distance: 132.70 units
[22:16:56 INF] Route (2 cities):
[22:16:56 INF] City_0 → City_1 → City_0
[22:16:56 INF] Show city coordinates? (y/n):
y
[22:16:59 INF] City Coordinates:
[22:16:59 INF]   City_0: (66.81, 14.09)
[22:16:59 INF]   City_1: (12.55, 52.28)
[22:16:59 INF] Interactive solver session completed successfully
[22:16:59 INF] Press any key to return to main menu...

[22:17:00 INF] 📍 Main Menu:
[22:17:00 INF]
[22:17:00 INF]   1. Interactive Solver - Solve custom TSP instances
[22:17:00 INF]   2. Algorithm Benchmark - Compare all algorithms
[22:17:00 INF]   3. Visual Demonstration - See algorithms in action
[22:17:00 INF]   4. Algorithm Information - Learn about each algorithm
[22:17:00 INF]   5. Exit
[22:17:00 INF] ➤ Select an option (1-5):
2
[22:17:05 INF] Starting benchmark session
[22:17:05 INF] ════════════════════════════════════════════════════════════
[22:17:05 INF]   Algorithm Benchmark
[22:17:05 INF] ════════════════════════════════════════════════════════════
[22:17:05 INF] Number of cities for benchmark:
20
[22:17:09 DBG] Generating 20 random cities in area 100x100
[22:17:09 INF] Generated 20 random cities
[22:17:09 INF] Generated 20 random cities for benchmark
[22:17:09 INF] 🔄 Running benchmark with 20 cities...
[22:17:09 INF] This may take a moment...
Processing: [22:17:09 INF] Starting benchmark with 20 cities and 4 algorithms
[22:17:09 DBG] Running benchmark for Nearest Neighbor
[22:17:09 INF] Starting Nearest Neighbor algorithm for 20 cities
[22:17:09 DBG] Building distance matrix for 20 cities
[22:17:09 DBG] Distance matrix built successfully
[22:17:09 INF] Nearest Neighbor completed: Distance 400.72
[22:17:09 INF] Benchmark completed for Nearest Neighbor: Distance 400.72, Time 1.5659ms
[22:17:09 DBG] Running benchmark for 2-Opt
[22:17:09 INF] Starting 2-Opt algorithm for 20 cities (max iterations: 200)
[22:17:09 DBG] Initial tour from Nearest Neighbor: 400.72
[22:17:09 DBG] Starting 2-Opt improvement from distance 400.72
[22:17:09 INF] 2-Opt completed after 3 iterations. Distance: 358.09 (improved by 10.6%)
[22:17:09 INF] Benchmark completed for 2-Opt: Distance 358.09, Time 1.4648ms
[22:17:09 DBG] Running benchmark for Simulated Annealing
[22:17:09 INF] Starting Simulated Annealing for 20 cities (temp: 2000, cooling: 0.9995, iterations per temp: 200)
[22:17:09 DBG] Starting SA from initial distance: 400.72
[22:17:11 INF] Simulated Annealing completed after 3960600 iterations. Distance: 358.09 (improved by 10.6%). Acceptance rate: 38.3%
[22:17:11 INF] Benchmark completed for Simulated Annealing: Distance 358.09, Time 1972.3685ms
[22:17:11 DBG] Running benchmark for Genetic Algorithm
[22:17:11 INF] Starting Genetic Algorithm for 20 cities (population: 200, generations: 400, mutation rate: 0.100, elitism rate: 0.100)
[22:17:11 DBG] Building distance matrix for 20 cities
[22:17:11 DBG] Distance matrix built successfully
[22:17:11 DBG] Initializing population of 200 individuals
[22:17:11 DBG] Initial population created. Best distance: 715.19
[22:17:11 DBG] Generation 1: New best solution 600.86
[22:17:11 DBG] Generation 4: New best solution 538.84
[22:17:11 DBG] Generation 5: New best solution 472.54
[22:17:11 DBG] Generation 7: New best solution 419.52
[22:17:11 DBG] Generation 8: New best solution 407.68
[22:17:11 DBG] Generation 9: New best solution 403.48
[22:17:11 DBG] Generation 12: New best solution 403.06
[22:17:11 DBG] Generation 14: New best solution 399.96
[22:17:11 DBG] Generation 15: New best solution 396.30
[22:17:11 DBG] Generation 17: New best solution 390.18
[22:17:11 DBG] Generation 28: New best solution 386.47
[22:17:11 DBG] Generation 74: New best solution 386.06
[22:17:11 DBG] Early stopping at generation 175 due to no improvement
[22:17:11 INF] Genetic Algorithm completed. Distance: 386.06 (improved by 46.0%)
[22:17:11 INF] Benchmark completed for Genetic Algorithm: Distance 386.06, Time 149.8346ms
[22:17:11 INF] Benchmark completed. Winner: 2-Opt with distance 358.09
 Done!
[22:17:11 INF] Benchmark completed - Cities: 20, TotalTime: 2127ms
[22:17:11 INF] Benchmark result - Algorithm: 2-Opt, Distance: 358.09, Time: 1.4648ms, Rank: 1
[22:17:11 INF] Benchmark result - Algorithm: Simulated Annealing, Distance: 358.09, Time: 1972.3685ms, Rank: 2
[22:17:11 INF] Benchmark result - Algorithm: Genetic Algorithm, Distance: 386.06, Time: 149.8346ms, Rank: 3
[22:17:11 INF] Benchmark result - Algorithm: Nearest Neighbor, Distance: 400.72, Time: 1.5659ms, Rank: 4
[22:17:11 INF]
=== TSP Solver Benchmark Results ===
Rank  Solver               Distance        Time (ms)  % from Best
---------------------------------------------------------------------------
1     2-Opt                358.09          1.5        0.00        %
2     Simulated Annealing  358.09          1972.4     0.00        %
3     Genetic Algorithm    386.06          149.8      7.81        %
4     Nearest Neighbor     400.72          1.6        11.90       %

[22:17:11 INF] 🏆 Winner: 2-Opt
[22:17:11 INF]    Distance: 358.09
[22:17:11 INF]    Time: 1.5 ms
[22:17:11 INF] Benchmark session completed - Winner: 2-Opt, Distance: 358.09
[22:17:11 INF] Press any key to return to main menu...

[22:17:14 INF] 📍 Main Menu:
[22:17:14 INF]
[22:17:14 INF]   1. Interactive Solver - Solve custom TSP instances
[22:17:14 INF]   2. Algorithm Benchmark - Compare all algorithms
[22:17:14 INF]   3. Visual Demonstration - See algorithms in action
[22:17:14 INF]   4. Algorithm Information - Learn about each algorithm
[22:17:14 INF]   5. Exit
[22:17:14 INF] ➤ Select an option (1-5):
5
[22:17:16 INF] User requested application exit
[22:17:16 INF] Thank you for using TSP Solver! Goodbye!
[22:17:16 INF] TSP Solver shutting down
kushal@texas:~/mybashscripts$ exit
logout
Connection to 192.168.0.120 closed.
PS C:\Users\kushal>
