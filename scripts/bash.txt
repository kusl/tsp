I ran into a problem on Debian 13. 

PowerShell 7.6.0-preview.4
PS C:\Users\kushal>
PS C:\Users\kushal> ssh kushal@192.168.0.120
kushal@192.168.0.120's password:
Linux texas 6.12.38+deb13-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.12.38-1 (2025-07-16) x86_64

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
Last login: Thu Aug 14 10:58:39 2025 from 192.168.0.126
kushal@texas:~$
kushal@texas:~$ dotnet
-bash: dotnet: command not found
kushal@texas:~$ curl
curl: try 'curl --help' or 'curl --manual' for more information
kushal@texas:~$ curl --help
Usage: curl [options...] <url>
 -d, --data <data>           HTTP POST data
 -f, --fail                  Fail fast with no output on HTTP errors
 -h, --help <subject>        Get help for commands
 -o, --output <file>         Write to file instead of stdout
 -O, --remote-name           Write output to file named as remote file
 -i, --show-headers          Show response headers in output
 -s, --silent                Silent mode
 -T, --upload-file <file>    Transfer local FILE to destination
 -u, --user <user:password>  Server user and password
 -A, --user-agent <name>     Send User-Agent <name> to server
 -v, --verbose               Make the operation more talkative
 -V, --version               Show version number and quit

This is not the full help; this menu is split into categories.
Use "--help category" to get an overview of all categories, which are:
auth, connection, curl, deprecated, dns, file, ftp, global, http, imap, ldap, output, pop3, post, proxy, scp, sftp, smtp, ssh, telnet, tftp, timeout, tls, upload, verbose.
Use "--help all" to list all options
Use "--help [option]" to view documentation for a given option
kushal@texas:~$ curl --version
curl 8.14.1 (x86_64-pc-linux-gnu) libcurl/8.14.1 OpenSSL/3.5.1 zlib/1.3.1 brotli/1.1.0 zstd/1.5.7 libidn2/2.3.8 libpsl/0.21.2 libssh2/1.11.1 nghttp2/1.64.0 nghttp3/1.8.0 librtmp/2.3 OpenLDAP/2.6.10
Release-Date: 2025-06-04, security patched: 8.14.1-2
Protocols: dict file ftp ftps gopher gophers http https imap imaps ipfs ipns ldap ldaps mqtt pop3 pop3s rtmp rtsp scp sftp smb smbs smtp smtps telnet tftp ws wss
Features: alt-svc AsynchDNS brotli GSS-API HSTS HTTP2 HTTP3 HTTPS-proxy IDN IPv6 Kerberos Largefile libz NTLM PSL SPNEGO SSL threadsafe TLS-SRP UnixSockets zstd
kushal@texas:~$ cd mybashscripts/
kushal@texas:~/mybashscripts$ time curl -o install-kusl-tsp.sh https://raw.githubusercontent.com/kusl/tsp/master/install-linux.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    14  100    14    0     0    119      0 --:--:-- --:--:-- --:--:--   119

real    0m0.136s
user    0m0.039s
sys     0m0.009s
kushal@texas:~/mybashscripts$ cat ~/mybashscripts/install-kusl-tsp.sh
404: Not Foundkushal@texas:~/mybashscripts$
kushal@texas:~/mybashscripts$ time curl -o install-kusl-tsp.sh https://raw.githubusercontent.com/kusl/tsp/refs/heads/master/scripts/install-linux.sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  9059  100  9059    0     0   120k      0 --:--:-- --:--:-- --:--:--  122k

real    0m0.091s
user    0m0.038s
sys     0m0.008s
kushal@texas:~/mybashscripts$ cat ~/mybashscripts/install-kusl-tsp.sh
#!/bin/bash

# TSP Solver Installation Script for Linux
# Installs the latest kusl/tsp release to /opt/kusl-tsp
# Safe, idempotent, and non-destructive

set -euo pipefail  # Exit on error, undefined variables, and pipe failures

# Configuration
readonly GITHUB_REPO="kusl/tsp"
readonly INSTALL_DIR="/opt"
readonly BINARY_NAME="kusl-tsp"
readonly INSTALL_PATH="${INSTALL_DIR}/${BINARY_NAME}"
readonly TEMP_DIR=$(mktemp -d)
readonly GITHUB_API="https://api.github.com/repos/${GITHUB_REPO}/releases/latest"

# Colors for output (works on most terminals)
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Cleanup function
cleanup() {
    if [[ -d "${TEMP_DIR}" ]]; then
        rm -rf "${TEMP_DIR}"
    fi
}

# Set trap to cleanup on exit
trap cleanup EXIT INT TERM

# Print colored messages
print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if running with appropriate permissions
check_permissions() {
    if [[ ! -w "${INSTALL_DIR}" ]]; then
        if [[ $EUID -ne 0 ]]; then
            print_error "This script needs write access to ${INSTALL_DIR}"
            print_info "Please run with sudo: sudo $0"
            exit 1
        fi
    fi
}

# Check for required commands
check_dependencies() {
    local deps=("curl" "jq" "chmod")
    local missing=()

    for cmd in "${deps[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        print_error "Missing required commands: ${missing[*]}"
        print_info "Install them with:"

        # Detect package manager
        if command -v dnf &> /dev/null; then
            echo "  sudo dnf install ${missing[*]}"
        elif command -v yum &> /dev/null; then
            echo "  sudo yum install ${missing[*]}"
        elif command -v apt-get &> /dev/null; then
            echo "  sudo apt-get install ${missing[*]}"
        else
            echo "  Please install: ${missing[*]}"
        fi
        exit 1
    fi
}

# Get the latest release information from GitHub
get_latest_release_info() {
    print_info "Fetching latest release information from GitHub..."

    local response
    response=$(curl -s -f "${GITHUB_API}" 2>/dev/null) || {
        print_error "Failed to fetch release information from GitHub"
        print_info "API URL: ${GITHUB_API}"
        return 1
    }

    # Extract the Linux x64 binary URL
    local download_url
    download_url=$(echo "$response" | jq -r '.assets[] | select(.name | contains("linux-x64")) | .browser_download_url' 2>/dev/null | head -n1)

    if [[ -z "$download_url" ]]; then
        # Try alternative pattern from release body or tag
        local tag_name
        tag_name=$(echo "$response" | jq -r '.tag_name' 2>/dev/null)

        if [[ -n "$tag_name" ]]; then
            # Extract SHA from tag (format: v25.8.18.1138-76e0c299)
            local sha
            sha=$(echo "$tag_name" | grep -oP '[a-f0-9]{8}$' || true)

            if [[ -n "$sha" ]]; then
                download_url="https://github.com/${GITHUB_REPO}/releases/download/${tag_name}/TSP-linux-x64-${sha}"
            fi
        fi
    fi

    if [[ -z "$download_url" ]]; then
        print_error "Could not find Linux x64 binary in the latest release"
        print_info "Please check: https://github.com/${GITHUB_REPO}/releases"
        return 1
    fi

    local version
    version=$(echo "$response" | jq -r '.tag_name' 2>/dev/null || echo "unknown")

    echo "$download_url|$version"
}

# Download the binary
download_binary() {
    local url=$1
    local output_file=$2

    print_info "Downloading from: $url"

    if ! curl -L -f -o "$output_file" "$url" --progress-bar; then
        print_error "Failed to download binary"
        return 1
    fi

    # Verify the download
    if [[ ! -f "$output_file" ]]; then
        print_error "Downloaded file not found"
        return 1
    fi

    local file_size
    file_size=$(stat -c%s "$output_file" 2>/dev/null || stat -f%z "$output_file" 2>/dev/null || echo 0)

    if [[ "$file_size" -lt 1000 ]]; then
        print_error "Downloaded file seems too small (${file_size} bytes)"
        return 1
    fi

    print_success "Download complete ($(numfmt --to=iec-i --suffix=B "$file_size" 2>/dev/null || echo "${file_size} bytes"))"
}

# Check if binary is already installed and get its version
get_installed_version() {
    if [[ -f "${INSTALL_PATH}" ]] && [[ -x "${INSTALL_PATH}" ]]; then
        # Try to get version from the binary
        local version
        version=$("${INSTALL_PATH}" --version 2>/dev/null | head -n1 || echo "unknown")
        echo "$version"
    else
        echo "none"
    fi
}

# Install the binary
install_binary() {
    local temp_binary=$1
    local version=$2

    print_info "Installing to ${INSTALL_PATH}..."

    # Backup existing binary if it exists
    if [[ -f "${INSTALL_PATH}" ]]; then
        local backup_path="${INSTALL_PATH}.backup.$(date +%Y%m%d-%H%M%S)"
        print_info "Backing up existing binary to ${backup_path}"
        cp "${INSTALL_PATH}" "${backup_path}"
    fi

    # Make binary executable
    chmod +x "$temp_binary"

    # Move to final location
    if ! mv -f "$temp_binary" "${INSTALL_PATH}"; then
        print_error "Failed to install binary to ${INSTALL_PATH}"
        return 1
    fi

    # Verify installation
    if [[ ! -x "${INSTALL_PATH}" ]]; then
        print_error "Installation verification failed"
        return 1
    fi

    print_success "Successfully installed ${BINARY_NAME} version ${version}"
}

# Create convenience symlink
create_symlink() {
    local symlink_path="/usr/local/bin/${BINARY_NAME}"

    print_info "Creating symlink for system-wide access..."

    # Check if /usr/local/bin exists
    if [[ ! -d "/usr/local/bin" ]]; then
        print_warning "/usr/local/bin does not exist, skipping symlink creation"
        return 0
    fi

    # Create or update symlink
    if ln -sf "${INSTALL_PATH}" "${symlink_path}" 2>/dev/null; then
        print_success "Symlink created: ${symlink_path} -> ${INSTALL_PATH}"
    else
        print_warning "Could not create symlink in /usr/local/bin (permission denied)"
        print_info "You can manually create it with:"
        echo "  sudo ln -sf ${INSTALL_PATH} ${symlink_path}"
    fi
}

# Main installation process
main() {
    echo "================================================="
    echo " TSP Solver Installation Script"
    echo " Repository: https://github.com/${GITHUB_REPO}"
    echo "================================================="
    echo

    # Check permissions
    check_permissions

    # Check dependencies
    check_dependencies

    # Get currently installed version
    local installed_version
    installed_version=$(get_installed_version)

    if [[ "$installed_version" != "none" ]]; then
        print_info "Currently installed version: ${installed_version}"
    else
        print_info "No existing installation found"
    fi

    # Get latest release info
    local release_info
    release_info=$(get_latest_release_info) || exit 1

    IFS='|' read -r download_url latest_version <<< "$release_info"

    print_info "Latest available version: ${latest_version}"

    # Ask for confirmation if already installed
    if [[ "$installed_version" != "none" ]]; then
        echo
        read -p "Do you want to proceed with the installation? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Installation cancelled"
            exit 0
        fi
    fi

    # Download binary to temp directory
    local temp_binary="${TEMP_DIR}/tsp-binary"
    download_binary "$download_url" "$temp_binary" || exit 1

    # Install the binary
    install_binary "$temp_binary" "$latest_version" || exit 1

    # Create symlink for easier access
    create_symlink

    echo
    print_success "Installation complete!"
    echo
    echo "You can now run the TSP solver using:"
    echo "  ${INSTALL_PATH}"

    if [[ -L "/usr/local/bin/${BINARY_NAME}" ]]; then
        echo "  or simply: ${BINARY_NAME}"
    else
        echo
        echo "To run from anywhere, add to PATH or create a symlink:"
        echo "  sudo ln -sf ${INSTALL_PATH} /usr/local/bin/${BINARY_NAME}"
    fi

    echo
    echo "For help, run:"
    echo "  ${BINARY_NAME} --help"
    echo

    # Test the installation
    print_info "Testing installation..."
    if "${INSTALL_PATH}" --version &>/dev/null; then
        print_success "Installation test passed!"
    else
        print_warning "Could not verify installation. Please test manually."
    fi
}

# Run main function
main "$@"
kushal@texas:~/mybashscripts$ chmod +x install-kusl-tsp.sh
kushal@texas:~/mybashscripts$ sudo date; time sudo ./install-kusl-tsp.sh
[sudo] password for kushal:
Sorry, try again.
[sudo] password for kushal:
Sun Aug 17 09:57:48 PM EDT 2025
=================================================
 TSP Solver Installation Script
 Repository: https://github.com/kusl/tsp
=================================================

[INFO] No existing installation found
[INFO] Latest available version:
[INFO] Downloading from: [INFO] Fetching latest release information from GitHub...
curl: (3) bad range in URL position 4:
[INFO] Fetching latest release information from GitHub...
   ^
[ERROR] Failed to download binary

real    0m0.246s
user    0m0.000s
sys     0m0.017s
kushal@texas:~/mybashscripts$ sudo date; time sudo ./install-kusl-tsp.sh
Sun Aug 17 09:57:59 PM EDT 2025
=================================================
 TSP Solver Installation Script
 Repository: https://github.com/kusl/tsp
=================================================

[INFO] No existing installation found
[INFO] Latest available version:
[INFO] Downloading from: [INFO] Fetching latest release information from GitHub...
curl: (3) bad range in URL position 4:
[INFO] Fetching latest release information from GitHub...
   ^
[ERROR] Failed to download binary

real    0m0.201s
user    0m0.015s
sys     0m0.000s
kushal@texas:~/mybashscripts$
