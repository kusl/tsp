I can see you have a TSP (Traveling Salesman Problem) solver project with a build issue. The error indicates that the version string format is invalid for .NET assemblies.

The problem is in your GitHub Actions workflow where you're generating a version like `2025.08.16.57.0` (5 parts), but .NET AssemblyVersion only accepts 4 parts maximum.

Here's how to fix this issue:The issue is that you're trying to create a 5-part version number (`2025.08.16.57.0`) but .NET AssemblyVersion only accepts 4 parts maximum. 

The problem is in this line from your workflow:
```yaml
sed -i.bak "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ steps.version.outputs.version }}.0<\/AssemblyVersion>/g" Directory.Build.props
```

You're appending `.0` to a version that already has 4 parts (`2025.08.16.57`), making it 5 parts.

**Quick fix**: Remove the `.0` suffix from the AssemblyVersion and FileVersion lines in your workflow:

```yaml
sed -i.bak "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ steps.version.outputs.version }}<\/AssemblyVersion>/g" Directory.Build.props
sed -i.bak "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ steps.version.outputs.version }}<\/FileVersion>/g" Directory.Build.props
```

This will generate valid 4-part versions like `2025.08.16.57` instead of the invalid `2025.08.16.57.0`.

Your TSP solver project looks really well-structured with comprehensive algorithms, logging, and CI/CD pipeline!







# TSP Project Version Format Fix

## Problem
The GitHub Actions workflow is generating a version string with 5 parts (e.g., `2025.08.16.57.0`) but .NET AssemblyVersion only accepts 4 parts maximum.

## Solution

### 1. Fix the Version Generation in `.github/workflows/release.yml`

Replace the version generation section:

```yaml
- name: Update version in Directory.Build.props
  shell: bash
  run: |
    # Update the version in Directory.Build.props with generated version
    sed -i.bak "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.version }}<\/Version>/g" Directory.Build.props
    sed -i.bak "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ steps.version.outputs.version }}.0<\/AssemblyVersion>/g" Directory.Build.props
    sed -i.bak "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ steps.version.outputs.version }}.0<\/FileVersion>/g" Directory.Build.props
    sed -i.bak "s/<InformationalVersion>.*<\/InformationalVersion>/<InformationalVersion>${{ steps.version.outputs.full_version }}<\/InformationalVersion>/g" Directory.Build.props
```

With this corrected version:

```yaml
- name: Update version in Directory.Build.props
  shell: bash
  run: |
    # Create a 4-part version for AssemblyVersion (max 65535 per part)
    # Take only first 3 parts of date version, use build number as 4th part
    ASSEMBLY_VERSION="${{ steps.version.outputs.version }}"
    
    # Update the version in Directory.Build.props
    sed -i.bak "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.version }}<\/Version>/g" Directory.Build.props
    sed -i.bak "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${ASSEMBLY_VERSION}<\/AssemblyVersion>/g" Directory.Build.props
    sed -i.bak "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${ASSEMBLY_VERSION}<\/FileVersion>/g" Directory.Build.props
    sed -i.bak "s/<InformationalVersion>.*<\/InformationalVersion>/<InformationalVersion>${{ steps.version.outputs.full_version }}<\/InformationalVersion>/g" Directory.Build.props

    echo "Updated Directory.Build.props:"
    grep -A 5 -B 1 "Version>" Directory.Build.props || true
```

### 2. Alternative: Update Directory.Build.props Default Values

Change your `Directory.Build.props` to use a simpler default version format:

```xml
<Project>
  <PropertyGroup>
    <!-- Version Management - use 4-part versioning -->
    <Version>1.2.0.0</Version>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <FileVersion>1.2.0.0</FileVersion>
    <InformationalVersion>1.2.0.0</InformationalVersion>
    
    <!-- Rest of your properties remain the same -->
    <TargetFramework>net9.0</TargetFramework>
    <!-- ... other properties ... -->
  </PropertyGroup>
</Project>
```

### 3. Recommended: Simplify Version Strategy

Consider using a simpler versioning approach in your workflow:

```yaml
- name: Generate version info
  id: version
  shell: bash
  run: |
    # Use semantic versioning with build number
    MAJOR="1"
    MINOR="2"
    PATCH="0"
    BUILD_NUMBER="$(git rev-list --count HEAD)"
    SHORT_SHA=$(git rev-parse --short HEAD)

    # Create 4-part version for .NET (max 65535 per part)
    VERSION="${MAJOR}.${MINOR}.${PATCH}.${BUILD_NUMBER}"
    FULL_VERSION="${VERSION}-${SHORT_SHA}"

    echo "version=${VERSION}" >> $GITHUB_OUTPUT
    echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT
    echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

    echo "Generated version: ${FULL_VERSION}"
    echo "Assembly version: ${VERSION} (4 parts)"
```

### 4. Quick Fix for Current Issue

If you want to keep your current date-based versioning, modify the version generation:

```yaml
- name: Generate version info
  id: version
  shell: bash
  run: |
    # Generate date-based version but keep it to 4 parts
    YEAR="$(date +'%Y')"
    MONTH="$(date +'%m')"
    DAY="$(date +'%d')"
    BUILD_NUMBER="$(git rev-list --count HEAD)"
    SHORT_SHA=$(git rev-parse --short HEAD)

    # Create 4-part version: YYYY.MM.DD.BUILD
    VERSION="${YEAR}.${MONTH}.${DAY}.${BUILD_NUMBER}"
    FULL_VERSION="${VERSION}-${SHORT_SHA}"

    echo "version=${VERSION}" >> $GITHUB_OUTPUT
    echo "full_version=${FULL_VERSION}" >> $GITHUB_OUTPUT
    echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

    echo "Generated version: ${FULL_VERSION}"
    echo "Assembly version: ${VERSION} (4 parts)"
```

## Testing the Fix

1. Make the changes to your workflow file
2. Commit and push to trigger the build
3. The version should now be in valid 4-part format like `2025.08.16.57`

## Additional Notes

- **Version**: Used for NuGet package versioning (can be more flexible)
- **AssemblyVersion**: Must be exactly 4 parts, each part â‰¤ 65535
- **FileVersion**: Same constraints as AssemblyVersion
- **InformationalVersion**: Can be any string format (perfect for Git hashes)

Your project structure looks excellent otherwise! The TSP solver implementation is comprehensive with multiple algorithms and good logging infrastructure.