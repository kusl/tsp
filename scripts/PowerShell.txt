PowerShell 7.6.0-preview.4
PS C:\Users\kushal>
PS C:\Users\kushal> C:\code\TSP\scripts\push.ps1
Script output has been saved to C:\code\TSP\scripts\PowerShell.txt
PS C:\code\TSP> pwd

Path
----
C:\code\TSP

PS C:\code\TSP> Print-Working-Directory
Print-Working-Directory: The term 'Print-Working-Directory' is not recognized as a name of a cmdlet, function, script file, or executable program.
Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
PS C:\code\TSP> Get-Location

Path
----
C:\code\TSP

PS C:\code\TSP> C:\code\TSP\scripts\push.ps1
Script output has been saved to C:\code\TSP\scripts\PowerShell.txt
warning: in the working copy of 'scripts/PowerShell.txt', LF will be replaced by CRLF the next time Git touches it
[master 4600c22] add all files
 1 file changed, 9 insertions(+), 20 deletions(-)
From github.com:kusl/tsp
 * [new tag]         v25.8.18.1190-d7e09c41 -> v25.8.18.1190-d7e09c41
Current branch master is up to date.
Enumerating objects: 12, done.
Counting objects: 100% (12/12), done.
Delta compression using up to 10 threads
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 5.06 KiB | 324.00 KiB/s, done.
Total 9 (delta 6), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (6/6), completed with 3 local objects.
To github.com:kusl/tsp.git
   d7e09c4..4600c22  master -> master
PS C:\code\TSP> Set-Location "C:\code\tsp"; git status; git remote show origin; git clean -dfx; tree /F; dotnet restore; dotnet build; dotnet test; dotnet test TravelingSalesman.Specs; dotnet test TravelingSalesman.Specs --logger "console;verbosity=detailed"; dotnet test TravelingSalesman.Specs --logger "html;LogFileName=test-results.html"; Copy-Item -Path "C:\code\TSP\TravelingSalesman.Specs\TestResults\test-results.html" -Destination "C:\code\TSP\docs\index.html" -Force
On branch master
Your branch is ahead of 'origin/master' by 1 commit.
  (use "git push" to publish your local commits)

nothing to commit, working tree clean
* remote origin
  Fetch URL: git@github.com:kusl/tsp.git
  Push  URL: git@github.com:kusl/tsp.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (fast-forwardable)
Folder PATH listing
Volume serial number is BE05-6605
C:.
│   .dockerignore
│   .gitattributes
│   .gitignore
│   Directory.Build.props
│   Directory.Packages.props
│   Dockerfile
│   LICENSE.txt
│   README.md
│   TSP.sln
│
├───.github
│   └───workflows
│           build.yml
│           release.yml
│
├───docs
│       index.html
│
├───scripts
│       bash.txt
│       cat.ps1
│       install-kusl-tsp-simple.sh
│       install-linux.sh
│       linux-installation-command.txt
│       PowerShell.txt
│       push.ps1
│
├───TravelingSalesman.ConsoleApp
│   │   Program.cs
│   │   TravelingSalesman.ConsoleApp.csproj
│   │
│   └───Properties
│           launchSettings.json
│
├───TravelingSalesman.Core
│       TravelingSalesman.Core.csproj
│       TravelingSalesmanLibrary.cs
│
├───TravelingSalesman.Specs
│   │   reqnroll.json
│   │   TravelingSalesman.Specs.csproj
│   │
│   ├───Features
│   │       Benchmarking.feature
│   │       CityOperations.feature
│   │       DataGeneration.feature
│   │       TspSolvers.feature
│   │
│   ├───StepDefinitions
│   │       BenchmarkingSteps.cs
│   │       CityOperationSteps.cs
│   │       DataGenerationSteps.cs
│   │       TspSolverSteps.cs
│   │
│   └───Support
│           Hooks.cs
│
└───TravelingSalesman.Tests
        Tests.cs
        TravelingSalesman.Tests.csproj

Restore complete (3.9s)

Build succeeded in 4.3s
Restore complete (1.7s)
You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  TravelingSalesman.Core succeeded (7.6s) → TravelingSalesman.Core\bin\Debug\net9.0\TravelingSalesman.Core.dll
  TravelingSalesman.Tests succeeded (2.8s) → TravelingSalesman.Tests\bin\Debug\net9.0\TravelingSalesman.Tests.dll
  TravelingSalesman.ConsoleApp succeeded (3.0s) → TravelingSalesman.ConsoleApp\bin\Debug\net9.0\TravelingSalesman.ConsoleApp.dll
  TravelingSalesman.Specs succeeded (4.5s) → TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll

Build succeeded in 15.1s
Restore complete (1.7s)
You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  TravelingSalesman.Core succeeded (0.2s) → TravelingSalesman.Core\bin\Debug\net9.0\TravelingSalesman.Core.dll
  TravelingSalesman.Tests succeeded (0.3s) → TravelingSalesman.Tests\bin\Debug\net9.0\TravelingSalesman.Tests.dll
  TravelingSalesman.ConsoleApp succeeded (0.8s) → TravelingSalesman.ConsoleApp\bin\Debug\net9.0\TravelingSalesman.ConsoleApp.dll
  TravelingSalesman.Specs succeeded (2.9s) → TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
[xUnit.net 00:00:00.01] xUnit.net VSTest Adapter v3.1.4+50e68bbb8b (64-bit .NET 9.0.8)
[xUnit.net 00:00:01.07]   Discovering: TravelingSalesman.Tests
[xUnit.net 00:00:01.27]   Discovered:  TravelingSalesman.Tests
[xUnit.net 00:00:01.38]   Starting:    TravelingSalesman.Tests
[xUnit.net 00:00:01.96]   Finished:    TravelingSalesman.Tests
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.4+50e68bbb8b (64-bit .NET 9.0.8)
  TravelingSalesman.Tests test succeeded (5.8s)
[xUnit.net 00:00:01.21]   Discovering: TravelingSalesman.Specs
[xUnit.net 00:00:01.50]   Discovered:  TravelingSalesman.Specs
[xUnit.net 00:00:01.58]   Starting:    TravelingSalesman.Specs
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.Verify.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.xUnit.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
-> Using reqnroll.json
Starting TSP Reqnroll test run
Starting scenario: Nearest Neighbor produces deterministic results
Starting scenario: Calculate distance between two cities
Starting scenario: Run benchmark on small problem
Starting scenario: Generate circular city pattern
Completed scenario: Calculate distance between two cities
Completed scenario: Nearest Neighbor produces deterministic results
Completed scenario: Generate circular city pattern
Starting scenario: Generate random cities
Starting scenario: Tour calculates total distance correctly
Starting scenario: Different algorithms produce valid tours
Completed scenario: Tour calculates total distance correctly
Starting scenario: Cities at the same location have zero distance
Completed scenario: Cities at the same location have zero distance
Starting scenario: Empty tour has zero distance
Completed scenario: Generate random cities
Completed scenario: Empty tour has zero distance
Starting scenario: Seeded generation is deterministic
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Seeded generation is deterministic
Starting scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Nearest Neighbor solver finds a valid tour
Completed scenario: Nearest Neighbor solver finds a valid tour
Starting scenario: 2-Opt improves upon Nearest Neighbor solution
Completed scenario: 2-Opt improves upon Nearest Neighbor solution
Starting scenario: Solvers handle large problem instances
Completed scenario: Solvers handle large problem instances
Completed scenario: Run benchmark on small problem
Starting scenario: Benchmark identifies best solution on simple problem
Completed scenario: Benchmark identifies best solution on simple problem
Starting scenario: Algorithm characteristics validation
2-Opt competitive check: NN=301.67, 2-Opt=301.67, Ratio=1.000
Completed scenario: Algorithm characteristics validation
Starting scenario: Quick algorithm comparison on small dataset
Completed scenario: Quick algorithm comparison on small dataset
Starting scenario: Solution quality on moderate problem
Completed scenario: Solution quality on moderate problem
Completed TSP Reqnroll test run
[xUnit.net 00:00:26.05]   Finished:    TravelingSalesman.Specs
  TravelingSalesman.Specs test succeeded (28.6s)

Test summary: total: 120, failed: 0, succeeded: 120, skipped: 0, duration: 31.7s
Build succeeded in 34.6s
Restore complete (1.2s)
You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  TravelingSalesman.Core succeeded (0.7s) → TravelingSalesman.Core\bin\Debug\net9.0\TravelingSalesman.Core.dll
  TravelingSalesman.ConsoleApp succeeded (1.5s) → TravelingSalesman.ConsoleApp\bin\Debug\net9.0\TravelingSalesman.ConsoleApp.dll
  TravelingSalesman.Specs succeeded (2.2s) → TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.4+50e68bbb8b (64-bit .NET 9.0.8)
[xUnit.net 00:00:00.36]   Discovering: TravelingSalesman.Specs
[xUnit.net 00:00:00.50]   Discovered:  TravelingSalesman.Specs
[xUnit.net 00:00:00.57]   Starting:    TravelingSalesman.Specs
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.Verify.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.xUnit.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
-> Using reqnroll.json
Starting TSP Reqnroll test run
Starting scenario: Run benchmark on small problem
Starting scenario: Nearest Neighbor produces deterministic results
Starting scenario: Calculate distance between two cities
Starting scenario: Generate circular city pattern
Completed scenario: Calculate distance between two cities
Completed scenario: Generate circular city pattern
Starting scenario: Tour calculates total distance correctly
Starting scenario: Generate random cities
Completed scenario: Tour calculates total distance correctly
Completed scenario: Nearest Neighbor produces deterministic results
Starting scenario: Cities at the same location have zero distance
Completed scenario: Cities at the same location have zero distance
Starting scenario: Empty tour has zero distance
Completed scenario: Empty tour has zero distance
Starting scenario: Different algorithms produce valid tours
Completed scenario: Generate random cities
Starting scenario: Seeded generation is deterministic
Completed scenario: Seeded generation is deterministic
Starting scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Nearest Neighbor solver finds a valid tour
Completed scenario: Nearest Neighbor solver finds a valid tour
Starting scenario: 2-Opt improves upon Nearest Neighbor solution
Completed scenario: 2-Opt improves upon Nearest Neighbor solution
Starting scenario: Solvers handle large problem instances
Completed scenario: Solvers handle large problem instances
Completed scenario: Run benchmark on small problem
Starting scenario: Benchmark identifies best solution on simple problem
Completed scenario: Benchmark identifies best solution on simple problem
Starting scenario: Algorithm characteristics validation
2-Opt competitive check: NN=301.67, 2-Opt=301.67, Ratio=1.000
Completed scenario: Algorithm characteristics validation
Starting scenario: Quick algorithm comparison on small dataset
Completed scenario: Quick algorithm comparison on small dataset
Starting scenario: Solution quality on moderate problem
Completed scenario: Solution quality on moderate problem
Completed TSP Reqnroll test run
[xUnit.net 00:00:24.12]   Finished:    TravelingSalesman.Specs
  TravelingSalesman.Specs test succeeded (25.9s)

Test summary: total: 21, failed: 0, succeeded: 21, skipped: 0, duration: 25.9s
Build succeeded in 32.8s
Restore complete (1.1s)
You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  TravelingSalesman.Core succeeded (0.2s) → TravelingSalesman.Core\bin\Debug\net9.0\TravelingSalesman.Core.dll
  TravelingSalesman.ConsoleApp succeeded (0.6s) → TravelingSalesman.ConsoleApp\bin\Debug\net9.0\TravelingSalesman.ConsoleApp.dll
  TravelingSalesman.Specs succeeded (1.3s) → TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
A total of 1 test files matched the specified pattern.
C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.4+50e68bbb8b (64-bit .NET 9.0.8)
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.4+50e68bbb8b (64-bit .NET 9.0.8)
[xUnit.net 00:00:00.19]   Discovering: TravelingSalesman.Specs
[xUnit.net 00:00:00.19]   Discovering: TravelingSalesman.Specs
[xUnit.net 00:00:00.32]   Discovered:  TravelingSalesman.Specs
[xUnit.net 00:00:00.32]   Discovered:  TravelingSalesman.Specs
[xUnit.net 00:00:00.39]   Starting:    TravelingSalesman.Specs
[xUnit.net 00:00:00.39]   Starting:    TravelingSalesman.Specs
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.Verify.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.Verify.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.xUnit.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.xUnit.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
-> Using reqnroll.json
-> Using reqnroll.json
Starting TSP Reqnroll test run
Starting TSP Reqnroll test run
Starting scenario: Nearest Neighbor produces deterministic results
Starting scenario: Nearest Neighbor produces deterministic results
Starting scenario: Run benchmark on small problem
Starting scenario: Run benchmark on small problem
Starting scenario: Calculate distance between two cities
Starting scenario: Calculate distance between two cities
Starting scenario: Generate circular city pattern
Starting scenario: Generate circular city pattern
Completed scenario: Calculate distance between two cities
Completed scenario: Calculate distance between two cities
Completed scenario: Generate circular city pattern
Completed scenario: Generate circular city pattern
Completed scenario: Nearest Neighbor produces deterministic results
Completed scenario: Nearest Neighbor produces deterministic results
Starting scenario: Generate random cities
Starting scenario: Generate random cities
Starting scenario: Tour calculates total distance correctly
Starting scenario: Tour calculates total distance correctly
Completed scenario: Tour calculates total distance correctly
Completed scenario: Tour calculates total distance correctly
Starting scenario: Cities at the same location have zero distance
Starting scenario: Cities at the same location have zero distance
Starting scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Cities at the same location have zero distance
Completed scenario: Cities at the same location have zero distance
Starting scenario: Empty tour has zero distance
Starting scenario: Empty tour has zero distance
Completed scenario: Empty tour has zero distance
Completed scenario: Empty tour has zero distance
Completed scenario: Generate random cities
Completed scenario: Generate random cities
Starting scenario: Seeded generation is deterministic
Starting scenario: Seeded generation is deterministic
Completed scenario: Seeded generation is deterministic
Completed scenario: Seeded generation is deterministic
Starting scenario: Generate grid city pattern
Starting scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Generate grid city pattern
Completed scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Nearest Neighbor solver finds a valid tour
Starting scenario: Nearest Neighbor solver finds a valid tour
Completed scenario: Nearest Neighbor solver finds a valid tour
Completed scenario: Nearest Neighbor solver finds a valid tour
Starting scenario: 2-Opt improves upon Nearest Neighbor solution
Starting scenario: 2-Opt improves upon Nearest Neighbor solution
Completed scenario: 2-Opt improves upon Nearest Neighbor solution
Completed scenario: 2-Opt improves upon Nearest Neighbor solution
Starting scenario: Solvers handle large problem instances
Starting scenario: Solvers handle large problem instances
Completed scenario: Solvers handle large problem instances
Completed scenario: Solvers handle large problem instances
  Passed Generate circular city pattern [101 ms]
  Standard Output Messages:
 When I generate 8 cities in a circular pattern with radius 10
 -> done: DataGenerationSteps.WhenIGenerateCitiesInACircularPatternWithRadius(8, 10) (0.0s)
 Then I should have 8 cities
 -> done: DataGenerationSteps.ThenIShouldHaveCities(8) (0.0s)
 And all cities should be approximately 10 units from center (50,50)
 -> done: DataGenerationSteps.ThenAllCitiesShouldBeApproximatelyUnitsFromCenter(10, 50, 50) (0.0s)
 And the cities should be evenly distributed around the circle
 -> done: DataGenerationSteps.ThenTheCitiesShouldBeEvenlyDistributedAroundTheCircle() (0.0s)


  Passed Calculate distance between two cities [89 ms]
  Standard Output Messages:
 Given I have a city "A" at coordinates (0, 0)
 -> done: CityOperationSteps.GivenIHaveACityAtCoordinates("A", 0, 0) (0.0s)
 And I have a city "B" at coordinates (3, 4)
 -> done: CityOperationSteps.GivenIHaveACityAtCoordinates("B", 3, 4) (0.0s)
 When I calculate the distance from city "A" to city "B"
 -> done: CityOperationSteps.WhenICalculateTheDistanceFromCityToCity("A", "B") (0.0s)
 Then the distance should be 5.0 units
 -> done: CityOperationSteps.ThenTheDistanceShouldBeUnits(5) (0.0s)


  Passed Nearest Neighbor produces deterministic results [114 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 When I solve the TSP using Nearest Neighbor algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("Nearest Neighbor") (0.0s)
 And I solve the same problem again using Nearest Neighbor algorithm
 -> done: TspSolverSteps.WhenISolveTheSameProblemAgainUsingAlgorithm("Nearest Neighbor") (0.0s)
 Then both solutions should have the same total distance
 -> done: TspSolverSteps.ThenBothSolutionsShouldHaveTheSameTotalDistance() (0.0s)
 And both solutions should have the same route
 -> done: TspSolverSteps.ThenBothSolutionsShouldHaveTheSameRoute() (0.0s)


  Passed Tour calculates total distance correctly [8 ms]
  Standard Output Messages:
 Given I have the following cities in order:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 1 | 0 |
   | C    | 1 | 1 |
   | D    | 0 | 1 |
 -> done: CityOperationSteps.GivenIHaveTheFollowingCitiesInOrder(<table>) (0.0s)
 When I create a tour visiting cities in the order A, B, C, D
 -> done: CityOperationSteps.WhenICreateATourVisitingCitiesInTheOrder("A, B, C, D") (0.0s)
 Then the total tour distance should be 4.0 units
 -> done: CityOperationSteps.ThenTheTotalTourDistanceShouldBeUnits(4) (0.0s)


  Passed Cities at the same location have zero distance [23 ms]
  Standard Output Messages:
 Given I have a city "A" at coordinates (10.5, 20.3)
 -> done: CityOperationSteps.GivenIHaveACityAtCoordinates("A", 10.5, 20.3) (0.0s)
 When I calculate the distance from city "A" to itself
 -> done: CityOperationSteps.WhenICalculateTheDistanceFromCityToItself("A") (0.0s)
 Then the distance should be 0.0 units
 -> done: CityOperationSteps.ThenTheDistanceShouldBeUnits(0) (0.0s)


  Passed Empty tour has zero distance [5 ms]
  Standard Output Messages:
 Given I have no cities
 -> done: CityOperationSteps.GivenIHaveNoCities() (0.0s)
 When I create an empty tour
 -> done: CityOperationSteps.WhenICreateAnEmptyTour() (0.0s)
 Then the total tour distance should be 0.0 units
 -> done: CityOperationSteps.ThenTheTotalTourDistanceShouldBeUnits(0) (0.0s)


  Passed Generate random cities [43 ms]
  Standard Output Messages:
 When I generate 10 random cities with seed 42
 -> done: DataGenerationSteps.WhenIGenerateRandomCitiesWithSeed(10, 42) (0.0s)
 Then I should have 10 cities
 -> done: DataGenerationSteps.ThenIShouldHaveCities(10) (0.0s)
 And all cities should be within bounds (0,0) to (100,100)
 -> done: DataGenerationSteps.ThenAllCitiesShouldBeWithinBounds(0, 0, 100, 100) (0.0s)
 And all cities should have unique IDs from 0 to 9
 -> done: DataGenerationSteps.ThenAllCitiesShouldHaveUniqueIDsFromTo(0, 9) (0.0s)


  Passed Seeded generation is deterministic [4 ms]
  Standard Output Messages:
 When I generate 5 random cities with seed 123
 -> done: DataGenerationSteps.WhenIGenerateRandomCitiesWithSeed(5, 123) (0.0s)
 And I generate 5 random cities again with seed 123
 -> done: DataGenerationSteps.WhenIGenerateRandomCitiesAgainWithSeed(5, 123) (0.0s)
 Then both city sets should be identical
 -> done: DataGenerationSteps.ThenBothCitySetsShouldBeIdentical() (0.0s)


  Passed Different algorithms produce valid tours(algorithm: "2-Opt", exampleTags: []) [18 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 When I solve the TSP using 2-Opt algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("2-Opt") (0.0s)
 Then the tour should visit all 4 cities
 -> done: TspSolverSteps.ThenTheTourShouldVisitAllCities(4) (0.0s)
 And the tour should return to the starting city
 -> done: TspSolverSteps.ThenTheTourShouldReturnToTheStartingCity() (0.0s)
 And the total distance should be between 10 and 20 units
 -> done: TspSolverSteps.ThenTheTotalDistanceShouldBeBetweenUnits(10, 20) (0.0s)


  Passed Different algorithms produce valid tours(algorithm: "Nearest Neighbor", exampleTags: []) [7 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 When I solve the TSP using Nearest Neighbor algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("Nearest Neighbor") (0.0s)
 Then the tour should visit all 4 cities
 -> done: TspSolverSteps.ThenTheTourShouldVisitAllCities(4) (0.0s)
 And the tour should return to the starting city
 -> done: TspSolverSteps.ThenTheTourShouldReturnToTheStartingCity() (0.0s)
 And the total distance should be between 10 and 20 units
 -> done: TspSolverSteps.ThenTheTotalDistanceShouldBeBetweenUnits(10, 20) (0.0s)


  Passed Generate grid city pattern [32 ms]
  Standard Output Messages:
 When I generate a 3x3 grid of cities with spacing 10
 -> done: DataGenerationSteps.WhenIGenerateAGridOfCitiesWithSpacing(3, 3, 10) (0.0s)
 Then I should have 9 cities
 -> done: DataGenerationSteps.ThenIShouldHaveCities(9) (0.0s)
 And the cities should form a regular grid pattern
 -> done: DataGenerationSteps.ThenTheCitiesShouldFormARegularGridPattern() (0.0s)
 And the minimum distance between adjacent cities should be 10 units
 -> done: DataGenerationSteps.ThenTheMinimumDistanceBetweenAdjacentCitiesShouldBeUnits(10) (0.0s)


  Passed Different algorithms produce valid tours(algorithm: "Genetic Algorithm", exampleTags: []) [23 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 When I solve the TSP using Genetic Algorithm algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("Genetic Algorithm") (0.0s)
 Then the tour should visit all 4 cities
 -> done: TspSolverSteps.ThenTheTourShouldVisitAllCities(4) (0.0s)
 And the tour should return to the starting city
 -> done: TspSolverSteps.ThenTheTourShouldReturnToTheStartingCity() (0.0s)
 And the total distance should be between 10 and 20 units
 -> done: TspSolverSteps.ThenTheTotalDistanceShouldBeBetweenUnits(10, 20) (0.0s)


  Passed Different algorithms produce valid tours(algorithm: "Simulated Annealing", exampleTags: []) [12 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 When I solve the TSP using Simulated Annealing algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("Simulated Annealing") (0.0s)
 Then the tour should visit all 4 cities
 -> done: TspSolverSteps.ThenTheTourShouldVisitAllCities(4) (0.0s)
 And the tour should return to the starting city
 -> done: TspSolverSteps.ThenTheTourShouldReturnToTheStartingCity() (0.0s)
 And the total distance should be between 10 and 20 units
 -> done: TspSolverSteps.ThenTheTotalDistanceShouldBeBetweenUnits(10, 20) (0.0s)


  Passed Nearest Neighbor solver finds a valid tour [9 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 When I solve the TSP using Nearest Neighbor algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("Nearest Neighbor") (0.0s)
 Then the tour should visit all 4 cities
 -> done: TspSolverSteps.ThenTheTourShouldVisitAllCities(4) (0.0s)
 And the tour should return to the starting city
 -> done: TspSolverSteps.ThenTheTourShouldReturnToTheStartingCity() (0.0s)
 And the total distance should be greater than 0
 -> done: TspSolverSteps.ThenTheTotalDistanceShouldBeGreaterThan(0) (0.0s)


  Passed 2-Opt improves upon Nearest Neighbor solution [12 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 Given I have solved the TSP using Nearest Neighbor algorithm
 -> done: TspSolverSteps.GivenIHaveSolvedTheTSPUsingNearestNeighborAlgorithm() (0.0s)
 When I apply 2-Opt optimization
 -> done: TspSolverSteps.WhenIApply2OptOptimization() (0.0s)
 Then the optimized tour distance should be less than or equal to the initial distance
 -> done: TspSolverSteps.ThenTheOptimizedTourDistanceShouldBeLessThanOrEqualToTheInitialDistance() (0.0s)


  Passed Solvers handle large problem instances [10 ms]
  Standard Output Messages:
 Given I have the following cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 3 | 0 |
   | C    | 3 | 4 |
   | D    | 0 | 4 |
 -> done: TspSolverSteps.GivenIHaveTheFollowingCities(<table>) (0.0s)
 Given I have 50 randomly generated cities for the TSP solver
 -> done: TspSolverSteps.GivenIHaveRandomlyGeneratedCities(50) (0.0s)
 When I solve the TSP using Nearest Neighbor algorithm
 -> done: TspSolverSteps.WhenISolveTheTSPUsingAlgorithm("Nearest Neighbor") (0.0s)
 Then the solution should complete within 1 second
 -> done: TspSolverSteps.ThenTheSolutionShouldCompleteWithinSeconds(1) (0.0s)
 And the tour should visit all 50 cities
 -> done: TspSolverSteps.ThenTheTourShouldVisitAllCities(50) (0.0s)


Completed scenario: Run benchmark on small problem
Completed scenario: Run benchmark on small problem
Starting scenario: Benchmark identifies best solution on simple problem
Starting scenario: Benchmark identifies best solution on simple problem
  Passed Run benchmark on small problem [7 s]
  Standard Output Messages:
 Given I have 10 randomly generated cities for benchmarking
 -> done: BenchmarkingSteps.GivenIHaveRandomlyGeneratedCities(10) (0.0s)
 When I benchmark all available algorithms
 -> done: BenchmarkingSteps.WhenIBenchmarkAllAvailableAlgorithms() (7.9s)
 Then I should receive benchmark results for each algorithm
 -> done: BenchmarkingSteps.ThenIShouldReceiveBenchmarkResultsForEachAlgorithm() (0.0s)
 And the results should be sorted by distance (best first)
 -> done: BenchmarkingSteps.ThenTheResultsShouldBeSortedByDistanceBestFirst() (0.0s)
 And each result should include execution time
 -> done: BenchmarkingSteps.ThenEachResultShouldIncludeExecutionTime() (0.0s)


Completed scenario: Benchmark identifies best solution on simple problem
Completed scenario: Benchmark identifies best solution on simple problem
  Passed Benchmark identifies best solution on simple problem [6 s]
  Standard Output Messages:
 Given I have the following simple cities:
   --- table step argument ---
   | Name | X | Y |
   | A    | 0 | 0 |
   | B    | 1 | 0 |
   | C    | 1 | 1 |
   | D    | 0 | 1 |
 -> done: BenchmarkingSteps.GivenIHaveTheFollowingSimpleCities(<table>) (0.0s)
 When I benchmark all available algorithms
 -> done: BenchmarkingSteps.WhenIBenchmarkAllAvailableAlgorithms() (6.7s)
 Then the best solution should have a distance of 4.0 units
 -> done: BenchmarkingSteps.ThenTheBestSolutionShouldHaveADistanceOfUnits(4) (0.0s)
 And all algorithms should find the optimal solution
 -> done: BenchmarkingSteps.ThenAllAlgorithmsShouldFindTheOptimalSolution() (0.0s)


Starting scenario: Algorithm characteristics validation
Starting scenario: Algorithm characteristics validation
2-Opt competitive check: NN=301.67, 2-Opt=301.67, Ratio=1.000
2-Opt competitive check: NN=301.67, 2-Opt=301.67, Ratio=1.000
Completed scenario: Algorithm characteristics validation
Completed scenario: Algorithm characteristics validation
Starting scenario: Quick algorithm comparison on small dataset
Starting scenario: Quick algorithm comparison on small dataset
  Passed Algorithm characteristics validation [101 ms]
  Standard Output Messages:
 Given I have 15 randomly generated cities for benchmarking
 -> done: BenchmarkingSteps.GivenIHaveRandomlyGeneratedCities(15) (0.0s)
 When I benchmark the following algorithms:
   --- table step argument ---
   | Algorithm           |
   | Nearest Neighbor    |
   | 2-Opt               |
   | Simulated Annealing |
   | Genetic Algorithm   |
 -> done: BenchmarkingSteps.WhenIBenchmarkTheFollowingAlgorithms(<table>) (0.1s)
 Then Nearest Neighbor should be among the fastest algorithms
 -> done: BenchmarkingSteps.ThenNearestNeighborShouldBeAmongTheFastestAlgorithms() (0.0s)
 And 2-Opt should produce competitive solution compared to Nearest Neighbor
 -> done: BenchmarkingSteps.Then2OptShouldProduceCompetitiveSolution() (0.0s)
 And advanced algorithms should produce competitive solutions
 -> done: BenchmarkingSteps.ThenAdvancedAlgorithmsShouldProduceCompetitiveSolutions() (0.0s)


Completed scenario: Quick algorithm comparison on small dataset
Completed scenario: Quick algorithm comparison on small dataset
  Passed Quick algorithm comparison on small dataset [7 s]
  Standard Output Messages:
 Given I have 8 randomly generated cities for benchmarking
 -> done: BenchmarkingSteps.GivenIHaveRandomlyGeneratedCities(8) (0.0s)
 When I benchmark all available algorithms
 -> done: BenchmarkingSteps.WhenIBenchmarkAllAvailableAlgorithms() (7.3s)
 Then all algorithms should find good solutions within 20% of optimal
 -> done: BenchmarkingSteps.ThenAllAlgorithmsShouldFindGoodSolutionsWithinOfOptimal(20) (0.0s)
 And Nearest Neighbor should complete in under 10 milliseconds
 -> done: BenchmarkingSteps.ThenNearestNeighborShouldCompleteInUnderMilliseconds(10) (0.0s)
 And all algorithms should complete in under 30 seconds
 -> done: BenchmarkingSteps.ThenAllAlgorithmsShouldCompleteInUnderSeconds(30) (0.0s)


Starting scenario: Solution quality on moderate problem
Starting scenario: Solution quality on moderate problem
Completed scenario: Solution quality on moderate problem
Completed scenario: Solution quality on moderate problem
Completed TSP Reqnroll test run
Completed TSP Reqnroll test run
[xUnit.net 00:00:23.32]   Finished:    TravelingSalesman.Specs
[xUnit.net 00:00:23.32]   Finished:    TravelingSalesman.Specs
  Passed Solution quality on moderate problem [69 ms]
  Standard Output Messages:
 Given I have 25 randomly generated cities for benchmarking
 -> done: BenchmarkingSteps.GivenIHaveRandomlyGeneratedCities(25) (0.0s)
 When I benchmark the following algorithms:
   --- table step argument ---
   | Algorithm           |
   | 2-Opt               |
   | Simulated Annealing |
   | Genetic Algorithm   |
 -> done: BenchmarkingSteps.WhenIBenchmarkTheFollowingAlgorithms(<table>) (0.1s)
 Then each algorithm should find a valid tour
 -> done: BenchmarkingSteps.ThenEachAlgorithmShouldFindAValidTour() (0.0s)
 And the best solution should be better than a random tour
 -> done: BenchmarkingSteps.ThenTheBestSolutionShouldBeBetterThanARandomTour() (0.0s)



Test Run Successful.
Total tests: 21
     Passed: 21
 Total time: 24.3185 Seconds
  TravelingSalesman.Specs test succeeded (24.9s)

Test summary: total: 21, failed: 0, succeeded: 21, skipped: 0, duration: 24.8s
Build succeeded in 29.3s
Restore complete (1.1s)
You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy
  TravelingSalesman.Core succeeded (0.1s) → TravelingSalesman.Core\bin\Debug\net9.0\TravelingSalesman.Core.dll
  TravelingSalesman.ConsoleApp succeeded (0.7s) → TravelingSalesman.ConsoleApp\bin\Debug\net9.0\TravelingSalesman.ConsoleApp.dll
  TravelingSalesman.Specs succeeded (1.3s) → TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v3.1.4+50e68bbb8b (64-bit .NET 9.0.8)
[xUnit.net 00:00:00.19]   Discovering: TravelingSalesman.Specs
[xUnit.net 00:00:00.32]   Discovered:  TravelingSalesman.Specs
[xUnit.net 00:00:00.39]   Starting:    TravelingSalesman.Specs
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.Verify.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\Reqnroll.xUnit.ReqnrollPlugin.dll
-> Loading plugin C:\code\TSP\TravelingSalesman.Specs\bin\Debug\net9.0\TravelingSalesman.Specs.dll
-> Using reqnroll.json
Starting TSP Reqnroll test run
Starting scenario: Nearest Neighbor produces deterministic results
Starting scenario: Calculate distance between two cities
Starting scenario: Run benchmark on small problem
Starting scenario: Generate circular city pattern
Completed scenario: Calculate distance between two cities
Completed scenario: Generate circular city pattern
Starting scenario: Tour calculates total distance correctly
Starting scenario: Generate random cities
Completed scenario: Tour calculates total distance correctly
Completed scenario: Nearest Neighbor produces deterministic results
Starting scenario: Cities at the same location have zero distance
Completed scenario: Cities at the same location have zero distance
Starting scenario: Empty tour has zero distance
Completed scenario: Empty tour has zero distance
Starting scenario: Different algorithms produce valid tours
Completed scenario: Generate random cities
Starting scenario: Seeded generation is deterministic
Completed scenario: Seeded generation is deterministic
Starting scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Generate grid city pattern
Completed scenario: Different algorithms produce valid tours
Starting scenario: Different algorithms produce valid tours
Completed scenario: Different algorithms produce valid tours
Starting scenario: Nearest Neighbor solver finds a valid tour
Completed scenario: Nearest Neighbor solver finds a valid tour
Starting scenario: 2-Opt improves upon Nearest Neighbor solution
Completed scenario: 2-Opt improves upon Nearest Neighbor solution
Starting scenario: Solvers handle large problem instances
Completed scenario: Solvers handle large problem instances
Completed scenario: Run benchmark on small problem
Starting scenario: Benchmark identifies best solution on simple problem
Completed scenario: Benchmark identifies best solution on simple problem
Starting scenario: Algorithm characteristics validation
2-Opt competitive check: NN=301.67, 2-Opt=301.67, Ratio=1.000
Completed scenario: Algorithm characteristics validation
Starting scenario: Quick algorithm comparison on small dataset
Completed scenario: Quick algorithm comparison on small dataset
Starting scenario: Solution quality on moderate problem
Completed scenario: Solution quality on moderate problem
Completed TSP Reqnroll test run
[xUnit.net 00:00:23.45]   Finished:    TravelingSalesman.Specs
Html test results file : C:\code\TSP\TravelingSalesman.Specs\TestResults\test-results.html
  TravelingSalesman.Specs test succeeded (25.4s)

Test summary: total: 21, failed: 0, succeeded: 21, skipped: 0, duration: 25.4s
Build succeeded in 29.9s
PS C:\code\TSP>
