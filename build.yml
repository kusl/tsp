name: Build and Test TSP Solver

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_mode:
        description: 'Run mode for the application'
        required: false
        default: 'benchmark'
        type: choice
        options:
          - benchmark
          - demo
          - test

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the Container registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_CONFIGURATION=Release

  test-interactive:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test_scenario: [benchmark, demonstration, small_problem, large_problem]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create test input file
      run: |
        case "${{ matrix.test_scenario }}" in
          benchmark)
            echo -e "2\n15\n" > input.txt
            ;;
          demonstration)
            echo -e "3\n" > input.txt
            ;;
          small_problem)
            echo -e "1\n10\n1\n1\n\nn\n" > input.txt
            ;;
          large_problem)
            echo -e "1\n30\n2\n4\n\nn\n" > input.txt
            ;;
        esac
        echo -e "5\n" >> input.txt  # Always exit at the end

    - name: Pull Docker image
      if: github.event_name != 'pull_request'
      run: docker pull ${{ needs.build.outputs.image-tag }}

    - name: Build Docker image locally (for PRs)
      if: github.event_name == 'pull_request'
      run: docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test .

    - name: Run TSP Solver - ${{ matrix.test_scenario }}
      run: |
        IMAGE="${{ github.event_name != 'pull_request' && needs.build.outputs.image-tag || format('{0}/{1}:test', env.REGISTRY, env.IMAGE_NAME) }}"
        
        # Run with timeout and capture output
        timeout 60s docker run --rm -i $IMAGE < input.txt | tee output.log
        
        # Check if the application ran successfully
        if [ ${PIPESTATUS[0]} -eq 124 ]; then
          echo "❌ Application timed out after 60 seconds"
          exit 1
        elif [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "❌ Application exited with error"
          exit 1
        else
          echo "✅ Application completed successfully"
        fi

    - name: Validate output
      run: |
        case "${{ matrix.test_scenario }}" in
          benchmark)
            if grep -q "TSP Solver Benchmark Results" output.log; then
              echo "✅ Benchmark completed successfully"
              grep "Winner:" output.log || true
            else
              echo "❌ Benchmark output not found"
              exit 1
            fi
            ;;
          demonstration)
            if grep -q "Demonstration Complete" output.log; then
              echo "✅ Demonstration completed successfully"
            else
              echo "❌ Demonstration did not complete"
              exit 1
            fi
            ;;
          small_problem|large_problem)
            if grep -q "Solution Found!" output.log; then
              echo "✅ Problem solved successfully"
              grep "Total Distance:" output.log || true
            else
              echo "❌ Solution not found"
              exit 1
            fi
            ;;
        esac

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-output-${{ matrix.test_scenario }}
        path: output.log

  run-non-interactive:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create non-interactive wrapper
      run: |
        cat > run-automated.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Running automated TSP solver tests..."
        
        # Run benchmark with 15 cities
        echo -e "2\n15\n5\n" | timeout 30s ./TravelingSalesman.ConsoleApp || true
        
        echo "---"
        
        # Run a quick solve with different algorithms
        for algo in 1 2 3 4; do
          echo "Testing algorithm $algo with 10 cities..."
          echo -e "1\n10\n1\n$algo\nn\n5\n" | timeout 20s ./TravelingSalesman.ConsoleApp || true
          echo "---"
        done
        
        echo "All automated tests completed!"
        EOF
        chmod +x run-automated.sh

    - name: Run automated tests in Docker
      run: |
        IMAGE="${{ needs.build.outputs.image-tag }}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          docker build -t testimage .
          IMAGE="testimage"
        else
          docker pull $IMAGE
        fi
        
        docker run --rm -v $(pwd)/run-automated.sh:/app/run-automated.sh:ro \
          --entrypoint /bin/bash $IMAGE /app/run-automated.sh

  performance-test:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run performance benchmark
      run: |
        IMAGE="${{ needs.build.outputs.image-tag }}"
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          docker build -t testimage .
          IMAGE="testimage"
        else
          docker pull $IMAGE
        fi
        
        # Test with increasing problem sizes
        for size in 5 10 15 20 25; do
          echo "Testing with $size cities..."
          echo -e "2\n$size\n5\n" | timeout 120s docker run --rm -i $IMAGE > perf_${size}.log 2>&1 || true
          
          # Extract timing information
          if grep -q "TSP Solver Benchmark Results" perf_${size}.log; then
            echo "Results for $size cities:"
            grep -A 10 "TSP Solver Benchmark Results" perf_${size}.log
          fi
          echo "---"
        done

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: perf_*.log

  # Optional: Create a release with the Docker image
  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [build, test-interactive, run-non-interactive]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Create Release Summary
      run: |
        cat > release-notes.md << EOF
        ## TSP Solver Docker Image
        
        **Image:** \`${{ needs.build.outputs.image-tag }}\`
        **Digest:** \`${{ needs.build.outputs.image-digest }}\`
        
        ### Pull Command
        \`\`\`bash
        docker pull ${{ needs.build.outputs.image-tag }}
        \`\`\`
        
        ### Run Command
        \`\`\`bash
        docker run -it --rm ${{ needs.build.outputs.image-tag }}
        \`\`\`
        
        ### Automated Run Example
        \`\`\`bash
        echo -e "2\\n15\\n5\\n" | docker run -i --rm ${{ needs.build.outputs.image-tag }}
        \`\`\`
        EOF

    - name: Upload Release Notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md