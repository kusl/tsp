name: Build, Test, and Release

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build and Test Docker
      run: |
        docker build -t tsp-solver:latest .
        echo -e "2\n5\n5\n" | timeout 10s docker run --rm -i tsp-solver:latest || true

  build-binaries:
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            rid: win-x64
            artifact: TSP-win-x64.exe
            build_cmd: dotnet publish -c Release -r win-x64 --self-contained -p:PublishAot=true -p:PublishSingleFile=true
          
          # Linux x64
          - os: ubuntu-latest
            rid: linux-x64
            artifact: TSP-linux-x64
            build_cmd: dotnet publish -c Release -r linux-x64 --self-contained -p:PublishAot=true -p:PublishSingleFile=true
          
          # Linux ARM64
          - os: ubuntu-latest
            rid: linux-arm64
            artifact: TSP-linux-arm64
            build_cmd: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              dotnet publish -c Release -r linux-arm64 --self-contained -p:PublishAot=true -p:PublishSingleFile=true
          
          # macOS x64
          - os: macos-13  # Intel Mac
            rid: osx-x64
            artifact: TSP-macos-x64
            build_cmd: dotnet publish -c Release -r osx-x64 --self-contained -p:PublishAot=true -p:PublishSingleFile=true
          
          # macOS ARM64 (Apple Silicon)
          - os: macos-14  # M1/M2 Mac
            rid: osx-arm64
            artifact: TSP-macos-arm64
            build_cmd: dotnet publish -c Release -r osx-arm64 --self-contained -p:PublishAot=true -p:PublishSingleFile=true

    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
    
    - name: Install dependencies
      run: dotnet restore TSP.sln
    
    - name: Build AOT Binary
      shell: bash
      run: |
        cd TravelingSalesman.ConsoleApp
        ${{ matrix.build_cmd }}
    
    - name: Prepare artifact
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          mv TravelingSalesman.ConsoleApp/bin/Release/net9.0/${{ matrix.rid }}/publish/TravelingSalesman.ConsoleApp.exe ${{ matrix.artifact }}
        else
          mv TravelingSalesman.ConsoleApp/bin/Release/net9.0/${{ matrix.rid }}/publish/TravelingSalesman.ConsoleApp ${{ matrix.artifact }}
          chmod +x ${{ matrix.artifact }}
        fi
        
        # Create size info
        ls -lh ${{ matrix.artifact }} > size-info-${{ matrix.rid }}.txt
    
    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.rid }}
        path: |
          ${{ matrix.artifact }}
          size-info-${{ matrix.rid }}.txt

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Display structure
      run: ls -la ./artifacts/*/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/binary-*/*
        body: |
          ## TSP Solver Release
          
          ### üöÄ Single Binary Executables
          No .NET runtime or Docker required! Just download and run.
          
          ### üì¶ Available Platforms:
          - **Windows x64**: `TSP-win-x64.exe`
          - **Linux x64**: `TSP-linux-x64`
          - **Linux ARM64**: `TSP-linux-arm64`
          - **macOS x64 (Intel)**: `TSP-macos-x64`
          - **macOS ARM64 (M1/M2)**: `TSP-macos-arm64`
          
          ### üèÉ Usage:
          ```bash
          # Linux/macOS
          chmod +x TSP-linux-x64
          ./TSP-linux-x64
          
          # Windows
          TSP-win-x64.exe
          ```
        draft: false
        prerelease: false